查询资金费率历史
接口描述
查询资金费率历史

HTTP请求
GET /fapi/v1/fundingRate

请求权重
和GET /fapi/v1/fundingInfo共享500/5min/IP

请求参数
名称	类型	是否必需	描述
symbol	STRING	NO	交易对
startTime	LONG	NO	起始时间
endTime	LONG	NO	结束时间
limit	INT	NO	默认值:100 最大值:1000
如果 startTime 和 endTime 都未发送, 返回最近 limit 条数据.
如果 startTime 和 endTime 之间的数据量大于 limit, 返回 startTime + limit情况下的数据。
响应示例
[
	{
    	"symbol": "BTCUSDT",			// 交易对
    	"fundingRate": "-0.03750000",	// 资金费率
    	"fundingTime": 1570608000000,	// 资金费时间
        "markPrice": "34287.54619963"   // 资金费对应标记价格
	},
	{
   		"symbol": "BTCUSDT",
    	"fundingRate": "0.00010000",
    	"fundingTime": 1570636800000,
        "markPrice": "34287.54619963"   // 资金费对应标记价格
	}
]

上一页
合约持仓量历史
接口描述
查询合约持仓量历史

HTTP请求
GET /futures/data/openInterestHist

请求权重
0

请求参数
名称	类型	是否必需	描述
symbol	STRING	YES	
period	ENUM	YES	"5m","15m","30m","1h","2h","4h","6h","12h","1d"
limit	LONG	NO	default 30, max 500
startTime	LONG	NO	
endTime	LONG	NO	
若无 startime 和 endtime 限制， 则默认返回当前时间往前的limit值
仅支持最近1个月的数据
IP限频为1000次/5min
响应示例
[
    { 
         "symbol":"BTCUSDT",
	      "sumOpenInterest":"20403.12345678",// 持仓总数量
	      "sumOpenInterestValue": "176196512.12345678", // 持仓总价值
	      "timestamp":"1583127900000"
    
     },
     {
     
         "symbol":"BTCUSDT",
         "sumOpenInterest":"20401.36700000",
         "sumOpenInterestValue":"149940752.14464448",
         "timestamp":"1583128200000"
     },   
]

全市场的精简Ticker
数据流描述
所有symbol24小时精简ticker信息.需要注意的是，只有发生变化的ticker更新才会被推送。

Stream Name
!miniTicker@arr

更新速度
1000ms

响应示例
[  
  {
    "e": "24hrMiniTicker",  // 事件类型
    "E": 123456789,         // 事件时间(毫秒)
    "s": "BNBUSDT",          // 交易对
    "c": "0.0025",          // 最新成交价格
    "o": "0.0010",          // 24小时前开始第一笔成交价格
    "h": "0.0025",          // 24小时内最高成交价
    "l": "0.0010",          // 24小时内最低成交价
    "v": "10000",           // 成交量
    "q": "18"               // 成交额
  }
]

归集交易
数据流描述
同一价格、同一方向、同一时间(100ms计算)的trade会被聚合为一条.

Stream Name
<symbol>@aggTrade

更新速度
100ms

响应示例
{
  "e": "aggTrade",  // 事件类型
  "E": 123456789,   // 事件时间
  "s": "BNBUSDT",    // 交易对
  "a": 5933014,		// 归集成交 ID
  "p": "0.001",     // 成交价格
  "q": "100",       // 成交量
  "f": 100,         // 被归集的首个交易ID
  "l": 105,         // 被归集的末次交易ID
  "T": 123456785,   // 成交时间
  "m": true         // 买方是否是做市方。如true，则此次成交是一个主动卖出单，否则是一个主动买入单。
}


市场数据连接
本篇所列出的所有wss接口需用下列方式连接：

Base Url：wss://fstream.binance.com
订阅单一stream格式为 /ws/<streamName>
组合streams的URL格式为 /stream?streams=/<streamName1>/<streamName2>/<streamName3>
连接样例：
wss://fstream.binance.com/ws/bnbusdt@aggTrade
wss://fstream.binance.com/stream?streams=bnbusdt@aggTrade/btcusdt@markPrice
订阅组合streams时，事件payload会以这样的格式封装 {"stream":"<streamName<","data":<rawPayload>}

stream名称中所有交易对均为小写。

每个链接有效期不超过24小时，请妥善处理断线重连。

服务端每3分钟会发送ping帧，客户端应当在10分钟内回复pong帧，否则服务端会主动断开链接。允许客户端发送不成对的pong帧(即客户端可以以高于15分钟每次的频率发送pong帧保持链接)。

Websocket服务器每秒最多接受10个订阅消息。

如果用户发送的消息超过限制，连接会被断开连接。反复被断开连接的IP有可能被服务器屏蔽。

单个连接最多可以订阅 1024 个Streams。
实时订阅/取消数据流
以下数据可以通过websocket发送以实现订阅或取消订阅数据流。示例如下。
响应内容中的id是无符号整数，作为往来信息的唯一标识。
订阅一个信息流
响应

{
  "result": null,
  "id": 1
}

请求

{
"method": "SUBSCRIBE",
"params":
[
"btcusdt@aggTrade",
"btcusdt@depth"
],
"id": 1
}

取消订阅一个信息流
响应

{
  "result": null,
  "id": 312
}

请求

{
"method": "UNSUBSCRIBE",
"params":
[
"btcusdt@depth"
],
"id": 312
}

已订阅信息流
响应

{
  "result": [
    "btcusdt@aggTrade"
  ],
  "id": 3
}

请求

{
"method": "LIST_SUBSCRIPTIONS",
"id": 3
}

设定属性
当前，唯一可以设置的属性是设置是否启用combined("组合")信息流。
当使用/ws/("原始信息流")进行连接时，combined属性设置为false，而使用 /stream/进行连接时则将属性设置为true。

响应

{
  "result": null
  "id": 5
}

请求

{
"method": "SET_PROPERTY",
"params":
[
"combined",
true
],
"id": 5
}

检索属性
响应

{
  "result": true, // Indicates that combined is set to true.
  "id": 2
}

请求

{
"method": "GET_PROPERTY",
"params":
[
"combined"
],
"id": 2
}

##错误信息

错误信息	描述
{"code": 0, "msg": "Unknown property"}	SET_PROPERTY 或 GET_PROPERTY中应用的参数无效
{"code": 1, "msg": "Invalid value type: expected Boolean"}	仅接受true或false
{"code": 2, "msg": "Invalid request: property name must be a string"}	提供的属性名无效
{"code": 2, "msg": "Invalid request: request ID must be an unsigned integer"}	参数id未提供或id值是无效类型
{"code": 2, "msg": "Invalid request: unknown variant %s, expected one of SUBSCRIBE, UNSUBSCRIBE, LIST_SUBSCRIPTIONS, SET_PROPERTY, GET_PROPERTY at line 1 column 28"}	错字提醒，或提供的值不是预期类型
{"code": 2, "msg": "Invalid request: too many parameters"}	数据中提供了不必要参数
{"code": 2, "msg": "Invalid request: property name must be a string"}	未提供属性名
{"code": 2, "msg": "Invalid request: missing field method at line 1 column 73"}	数据未提供method
{"code":3,"msg":"Invalid JSON: expected value at line %s column %s"}	JSON 语法有误.
上一页
连续合约K线
数据流描述
K线stream逐秒推送所请求的K线种类(最新一根K线)的更新。

合约类型:

perpetual 永续合约
current_quarter 当季交割合约
next_quarter 次季交割合约
订阅Kline需要提供间隔参数,最短为分钟线,最长为月线。支持以下间隔:

m -> 分钟; h -> 小时; d -> 天; w -> 周; M -> 月

1m
3m
5m
15m
30m
1h
2h
4h
6h
8h
12h
1d
3d
1w
1M
Stream Name
<pair>_<contractType>@continuousKline_<interval>

更新速度
250ms

响应示例
{
  "e":"continuous_kline",	// 事件类型
  "E":1607443058651,		// 事件时间
  "ps":"BTCUSDT",			// 标的交易对
  "ct":"PERPETUAL",			// 合约类型 
  "k":{
    "t":1607443020000,		// 这根K线的起始时间
    "T":1607443079999,		// 这根K线的结束时间
    "i":"1m",				// K线间隔
    "f":116467658886,		// 这根K线期间第一笔更新ID
    "L":116468012423,		// 这根K线期间末一笔更新ID
    "o":"18787.00",			// 这根K线期间第一笔成交价
    "c":"18804.04",			// 这根K线期间末一笔成交价
    "h":"18804.04",			// 这根K线期间最高成交价
    "l":"18786.54",			// 这根K线期间最低成交价
    "v":"197.664",			// 这根K线期间成交量
    "n":543,				// 这根K线期间成交笔数
    "x":false,				// 这根K线是否完结(是否已经开始下一根K线)
    "q":"3715253.19494",	// 这根K线期间成交额
    "V":"184.769",			// 主动买入的成交量
    "Q":"3472925.84746",	// 主动买入的成交额
    "B":"0"					// 忽略此参数
  }
}

上一页
全市场的精简Ticker
数据流描述
所有symbol24小时精简ticker信息.需要注意的是，只有发生变化的ticker更新才会被推送。

Stream Name
!miniTicker@arr

更新速度
1000ms

响应示例
[  
  {
    "e": "24hrMiniTicker",  // 事件类型
    "E": 123456789,         // 事件时间(毫秒)
    "s": "BNBUSDT",          // 交易对
    "c": "0.0025",          // 最新成交价格
    "o": "0.0010",          // 24小时前开始第一笔成交价格
    "h": "0.0025",          // 24小时内最高成交价
    "l": "0.0010",          // 24小时内最低成交价
    "v": "10000",           // 成交量
    "q": "18"               // 成交额
  }
]

上一页
WebSocket API基本信息
Base url为：'wss://ws-fapi.binance.com/ws-fapi/v1'
测试网的Base url为：wss://testnet.binancefuture.com/ws-fapi/v1
单次连接API有效期仅为24小时;预计在 24 小时标记后断开连接。
Websocket服务器每3分钟发送一个ping消息。
如果 websocket 服务器在10分钟内没有收到来自连接的pong frame，则连接将断开。
当客户收到ping消息，必需尽快回复pong消息，同时payload需要和ping消息一致。
未经请求的pong消息是被允许的，但是不会保证连接不断开。对于这些pong消息，建议payload为空。
必须通过获取除签名之外的所有请求参数并按字母顺序按名称排序来生成签名payload
除非另有说明，否则列表按时间顺序返回。
除非另有说明，否则所有时间戳均以 UTC 中的毫秒为单位。
除非另有说明，否则所有字段名称和值均区分大小写。
INT 参数（如时间戳）应为 JSON 整数，而不是字符串。
DECIMAL参数（如 price）应为 JSON 字符串，而不是浮点数。
用户数据流请求 - 您需要建立单独的WebSocket连接来获得 [账户信息推送]（https://binance-docs.github.io/apidocs/futures/cn/#websocket-2）
请求示例:

{
  "id": "9ca10e58-7452-467e-9454-f669bb9c764e",
  "method": "order.place",
  "params": {
    "apiKey": "yeqKcXjtA9Eu4Tr3nJk61UJAGzXsEmFqqfVterxpMpR4peNfqE7Zl7oans8Qj089",
    "price": "42088.0",
    "quantity": "0.1",
    "recvWindow": 5000,
    "side": "BUY",
    "signature": "996962a19802b5a09d7bc6ab1524227894533322a2f8a1f8934991689cabf8fe",
    "symbol": "BTCUSDT",
    "timeInForce": "GTC",
    "timestamp": 1705311512994,
    "type": "LIMIT"
  }
}

请求字段:

名称	类型	是否必需	描述
id	INT / STRING / null	YES	任意的 ID 用于匹配对请求的响应
method	STRING	YES	请求函数名称
params	OBJECT	NO	请求参数。如果没有参数可以省略
请求 id 是任意的。可以使用 UUID、顺次 ID、当前时间戳等。 服务器不会以任何方式解释 id，只是在响应中回显它。

可以在一个会话中自由重复使用 ID，不过请注意不要一次发送多个具有相同 ID 的请求，因为否则可能无法区分响应。

请求函数名称可以以显式版本为前缀，例如："v3/order.place"

params 的顺序不重要。

WebSocket API响应格式
响应在 text 帧 中以 JSON 格式返回，每帧一个响应。

成功响应示例:

{
  "id": "43a3843a-2321-4e45-8f79-351e5c354563",
  "status": 200,
  "result": {
    "orderId": 336829446,
    "symbol": "BTCUSDT",
    "status": "NEW",
    "clientOrderId": "FqEw6cn0vDhrkmfiwLYPeo",
    "price": "42088.00",
    "avgPrice": "0.00",
    "origQty": "0.100",
    "executedQty": "0.000",
    "cumQty": "0.000",
    "cumQuote": "0.00000",
    "timeInForce": "GTC",
    "type": "LIMIT",
    "reduceOnly": false,
    "closePosition": false,
    "side": "BUY",
    "positionSide": "BOTH",
    "stopPrice": "0.00",
    "workingType": "CONTRACT_PRICE",
    "priceProtect": false,
    "origType": "LIMIT",
    "priceMatch": "NONE",
    "selfTradePreventionMode": "NONE",
    "goodTillDate": 0,
    "updateTime": 1705385954229
  },
  "rateLimits": [
    {
      "rateLimitType": "REQUEST_WEIGHT",
      "interval": "MINUTE",
      "intervalNum": 1,
      "limit": 2400,
      "count": 1
    },
    {
      "rateLimitType": "ORDERS",
      "interval": "SECOND",
      "intervalNum": 10,
      "limit": 300,
      "count": 1
    },
    {
      "rateLimitType": "ORDERS",
      "interval": "MINUTE",
      "intervalNum": 1,
      "limit": 1200,
      "count": 0
    }
  ]
}

失败响应示例:

{
  "id": "5761b939-27b1-4948-ab87-4a372a3f6b72",
  "status": 400,
  "error": {
    "code": -1102,
    "msg": "Mandatory parameter 'quantity' was not sent, was empty/null, or malformed."
  },
  "rateLimits": [
    {
      "rateLimitType": "REQUEST_WEIGHT",
      "interval": "MINUTE",
      "intervalNum": 1,
      "limit": 2400,
      "count": 1
    },
    {
      "rateLimitType": "ORDERS",
      "interval": "SECOND",
      "intervalNum": 10,
      "limit": 300,
      "count": 1
    },
    {
      "rateLimitType": "ORDERS",
      "interval": "MINUTE",
      "intervalNum": 1,
      "limit": 1200,
      "count": 1
    }
  ]
}

响应字段:

名称	类型	是否必需	描述
id	INT / STRING / null	YES	与原来请求的ID一样
status	INT	YES	响应状态。请看 状态代码
result	OBJECT / ARRAY	YES	响应内容。请求成功则显示
error	OBJECT	错误描述。请求失败则显示
rateLimits	ARRAY	NO	速率限制状态。请看 速率限制
WebSocket API访问限制
速率限制与 REST API 相同，并且与 REST API 共享。
WebSocket 握手尝试消耗权重5。
ping/pong 帧的速率限制：每秒最多5次。
默认情况下，响应中包含速率限制信息，参见 rateLimits 字段。
可以通过在连接字符串或单个请求中的 returnRateLimits 布尔参数来控制 rateLimits 字段的可见性。
例如，使用 wss://ws-fapi.binance.com/ws-fapi/v1?returnRateLimits=false 默认在响应中隐藏 rateLimits。在这样的情况下，您可以在请求中传递额外的 "returnRateLimits": true 参数，当默认隐藏时，就可以在响应中显示速率限制。
WebSocket API连接后进行身份验证
你可以使用会话身份验证请求对已经建立的连接进行身份验证：

session.logon – 进行身份验证，或更改与连接相关联的API密钥。
session.status – 检查连接状态和当前API密钥。
session.logout – 忘记与连接关联的API密钥。
WebSocket API关于吊销API密钥
如果在活动会话期间，由于 任何 原因（例如IP地址未被加入白名单、API密钥被删除、API密钥没有正确的权限等），在下一个请求后，会话将被吊销，并显示以下错误消息:

{
  "id": null,
  "status": 401,
  "error": {
    "code": -2015,
    "msg": "Invalid API-key, IP, or permissions for action." 
  }
}

WebSocket API授权 临时 请求
WebSocket连接只能通过一个API密钥进行身份验证。 默认情况下，经过身份验证的API密钥将用于需要apiKey参数的请求。 但是，你始终可以为单个请求明确指定apiKey和signature，覆盖已认证的API密钥，以使用不同的API密钥授权特定请求。

例如，你可能希望用默认密钥来验证 USER_DATA，但在下单时使用TRADE密钥来签名。

WebSocket API身份验证请求
注意： 仅支持 Ed25519 密钥用于此功能。

用API key登录 (SIGNED)
请求

{
  "id": "c174a2b1-3f51-4580-b200-8528bd237cb7",
  "method": "session.logon",
  "params": {
    "apiKey": "vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A",
    "signature": "1cf54395b336b0a9727ef27d5d98987962bc47aca6e13fe978612d0adee066ed",
    "timestamp": 1649729878532
  }
}

响应:

{
  "id": "c174a2b1-3f51-4580-b200-8528bd237cb7",
  "status": 200,
  "result": {
    "apiKey": "vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A",
    "authorizedSince": 1649729878532,
    "connectedSince": 1649729873021,
    "returnRateLimits": false,
    "serverTime": 1649729878630
  }
}

使用提供的API密钥进行WebSocket连接身份验证。

在调用session.logon后，将来的需要apiKey和signature参数的请求可以省略它们。

请注意，只能认证一个API密钥。 多次调用session.logon将更改当前已认证的API密钥。

权重: 2

参数:

参数名	类型	是否必需	描述
apiKey	STRING	YES	
recvWindow	INT	NO	The value cannot be greater than 60000
signature	STRING	YES	
timestamp	INT	YES	
数据源: 缓存

查询会话状态
请求

{
  "id": "b50c16cd-62c9-4e29-89e4-37f10111f5bf",
  "method": "session.status"
}

响应:

{
  "id": "b50c16cd-62c9-4e29-89e4-37f10111f5bf",
  "status": 200,
  "result": {
    // 如果连接未经身份验证，"apiKey" 和 "authorizedSince" 将显示为 null。
    "apiKey": "vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A",
    "authorizedSince": 1649729878532,
    "connectedSince": 1649729873021,
    "returnRateLimits": false,
    "serverTime": 1649730611671
  }
}

查询WebSocket连接的状态，检查用于授权请求的API密钥（如果有的话）。

权重: 2

参数: NONE

数据源: 缓存

退出会话
请求

{
  "id": "c174a2b1-3f51-4580-b200-8528bd237cb7",
  "method": "session.logout"
}

响应:

{
  "id": "c174a2b1-3f51-4580-b200-8528bd237cb7",
  "status": 200,
  "result": {
    "apiKey": null,
    "authorizedSince": null,
    "connectedSince": 1649729873021,
    "returnRateLimits": false,
    "serverTime": 1649730611671
  }
}

忘记之前认证的API密钥。 如果连接未经身份验证，此请求不会有任何作用。

请注意，session.logout请求后，WebSocket连接仍然保持打开状态。 你可以继续使用连接，但现在必须在需要的地方明确提供apiKey和signature参数。

权重: 2

参数: NONE

数据源: 缓存

SIGNED (TRADE and USER_DATA) 请求安全
SIGNED 请求示例 (Ed25519)
*我们建议使用 Ed25519 API keys**，因为它在所有受支持的 API key 类型中提供最佳性能和安全性。
参数	取值
symbol	BTCUSDT
side	SELL
type	LIMIT
timeInForce	GTC
quantity	1
price	0.2
timestamp	1668481559918
#!/usr/bin/env python3
import base64
import time
import json
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from websocket import create_connection
# 设置身份验证：
API_KEY='替换成您的 API Key'
PRIVATE_KEY_PATH='test-prv-key.pem'
# 加载 private key。
# 在这个例子中，private key 没有加密，但我们建议使用强密码以提高安全性。
with open(PRIVATE_KEY_PATH, 'rb') as f:
    private_key = load_pem_private_key(data=f.read(), password=None)
# 设置请求参数：
params = {
    'apiKey':        API_KEY,	
    'symbol':       'BTCUSDT',
    'side':         'SELL',
    'type':         'LIMIT',
    'timeInForce':  'GTC',
    'quantity':     '1.0000000',
    'price':        '0.20'
}
# 参数中加时间戳：
timestamp = int(time.time() * 1000) # 以毫秒为单位的 UNIX 时间戳
params['timestamp'] = timestamp
# 参数中加签名：
payload = '&'.join([f'{param}={value}' for param, value in sorted(params.items())])
signature = base64.b64encode(private_key.sign(payload.encode('ASCII')))
params['signature'] = signature.decode('ASCII')
# 发送请求：
request = {	
    'id': 'my_new_order',	
    'method': 'order.place',	
    'params': params
}
ws = create_connection('wss://ws-fapi.binance.com/ws-fapi/v1')	
ws.send(json.dumps(request))	
result =  ws.recv()	
ws.close()	
print(result)

右边有 Python 脚本来示例如何使用 Ed25519 key 签名。

上一页
公开API参数
术语解释
base asset 指一个交易对的交易对象，即写在靠前部分的资产名
quote asset 指一个交易对的定价资产，即写在靠后部分资产名
枚举定义
交易对类型:

FUTURE 期货
合约类型 (contractType):

PERPETUAL 永续合约
CURRENT_MONTH 当月交割合约
NEXT_MONTH 次月交割合约
CURRENT_QUARTER 当季交割合约
NEXT_QUARTER 次季交割合约
PERPETUAL_DELIVERING 交割结算中合约
合约状态 (contractStatus, status):

PENDING_TRADING 待上市
TRADING 交易中
PRE_DELIVERING 预交割
DELIVERING 交割中
DELIVERED 已交割
PRE_SETTLE 预结算
SETTLING 结算中
CLOSE 已下架
订单状态 (status):

NEW 新建订单
PARTIALLY_FILLED 部分成交
FILLED 全部成交
CANCELED 已撤销
REJECTED 订单被拒绝
EXPIRED 订单过期(根据timeInForce参数规则)
EXPIRED_IN_MATCH 订单被STP过期
订单种类 (orderTypes, type):

LIMIT 限价单
MARKET 市价单
STOP 止损限价单
STOP_MARKET 止损市价单
TAKE_PROFIT 止盈限价单
TAKE_PROFIT_MARKET 止盈市价单
TRAILING_STOP_MARKET 跟踪止损单
订单方向 (side):

BUY 买入
SELL 卖出
持仓方向:

BOTH 单一持仓方向
LONG 多头(双向持仓下)
SHORT 空头(双向持仓下)
有效方式 (timeInForce):

GTC - Good Till Cancel 成交为止（下单后仅有1年有效期，1年后自动取消）
IOC - Immediate or Cancel 无法立即成交(吃单)的部分就撤销
FOK - Fill or Kill 无法全部立即成交就撤销
GTX - Good Till Crossing 无法成为挂单方就撤销
GTD - Good Till Date 在特定时间之前有效，到期自动撤销
条件价格触发类型 (workingType)

MARK_PRICE
CONTRACT_PRICE
响应类型 (newOrderRespType)

ACK
RESULT
K线间隔:

m -> 分钟; h -> 小时; d -> 天; w -> 周; M -> 月

1m
3m
5m
15m
30m
1h
2h
4h
6h
8h
12h
1d
3d
1w
1M
防止自成交模式:

EXPIRE_TAKER
EXPIRE_BOTH
EXPIRE_MAKER
盘口价下单模式:

OPPONENT (盘口对手价)
OPPONENT_5 (盘口对手5档价)
OPPONENT_10 (盘口对手10档价)
OPPONENT_20
QUEUE (盘口同向价)
QUEUE_5 (盘口同向排队5档价)
QUEUE_10 (盘口同向排队10档价)
QUEUE_20 (盘口同向排队20档价)
限制种类 (rateLimitType)

REQUEST_WEIGHT

  {
  	"rateLimitType": "REQUEST_WEIGHT",
  	"interval": "MINUTE",
  	"intervalNum": 1,
  	"limit": 2400
  }

ORDERS

  {
  	"rateLimitType": "ORDERS",
  	"interval": "MINUTE",
  	"intervalNum": 1,
  	"limit": 1200
   }

REQUESTS_WEIGHT 单位时间请求权重之和上限

ORDERS 单位时间下单(撤单)次数上限

限制间隔

MINUTE
过滤器
过滤器，即Filter，定义了一系列交易规则。 共有两类，分别是针对交易对的过滤器symbol filters，和针对整个交易所的过滤器exchange filters(暂不支持)

交易对过滤器
PRICE_FILTER 价格过滤器
/exchangeInfo 响应中的格式:

  {
    "filterType": "PRICE_FILTER",
    "minPrice": "0.00000100",
    "maxPrice": "100000.00000000",
    "tickSize": "0.00000100"
  }

价格过滤器用于检测order订单中price参数的合法性

minPrice 定义了 price/stopPrice 允许的最小值
maxPrice 定义了 price/stopPrice 允许的最大值。
tickSize 定义了 price/stopPrice 的步进间隔，即price必须等于minPrice+(tickSize的整数倍) 以上每一项均可为0，为0时代表这一项不再做限制。
逻辑伪代码如下：

price >= minPrice
price <= maxPrice
(price-minPrice) % tickSize == 0
LOT_SIZE 订单尺寸
/exchangeInfo 响应中的格式:*

  {
    "filterType": "LOT_SIZE",
    "minQty": "0.00100000",
    "maxQty": "100000.00000000",
    "stepSize": "0.00100000"
  }

lots是拍卖术语，这个过滤器对订单中的quantity也就是数量参数进行合法性检查。包含三个部分：

minQty 表示 quantity 允许的最小值.
maxQty 表示 quantity 允许的最大值
stepSize 表示 quantity允许的步进值。
逻辑伪代码如下：

quantity >= minQty
quantity <= maxQty
(quantity-minQty) % stepSize == 0
MARKET_LOT_SIZE 市价订单尺寸
参考LOT_SIZE，区别仅在于对市价单还是限价单生效

MAX_NUM_ORDERS 最多订单数
/exchangeInfo 响应中的格式:

  {
    "filterType": "MAX_NUM_ORDERS",
    "limit": 200
  }

定义了某个交易对最多允许的挂单数量(不包括已关闭的订单)

普通订单与条件订单均计算在内

MAX_NUM_ALGO_ORDERS 最多条件订单数
/exchangeInfo format:

  {
    "filterType": "MAX_NUM_ALGO_ORDERS",
    "limit": 100
  }

定义了某个交易对最多允许的条件订单的挂单数量(不包括已关闭的订单)。

条件订单目前包括STOP, STOP_MARKET, TAKE_PROFIT, TAKE_PROFIT_MARKET, 和 TRAILING_STOP_MARKET

PERCENT_PRICE 价格振幅过滤器
/exchangeInfo 响应中的格式:

  {
    "filterType": "PERCENT_PRICE",
    "multiplierUp": "1.1500",
    "multiplierDown": "0.8500",
    "multiplierDecimal": 4
  }

PERCENT_PRICE 定义了基于标记价格计算的挂单价格的可接受区间.

挂单价格必须同时满足以下条件：

买单: price <= markPrice * multiplierUp
卖单: price >= markPrice * multiplierDown
MIN_NOTIONAL 最小名义价值
/exchangeInfo 响应中的格式:

  {
    "filterType": "MIN_NOTIONAL",
    "notional": "5.0"
  }

MIN_NOTIONAL过滤器定义了交易对订单所允许的最小名义价值(成交额)。 订单的名义价值是价格*数量。 由于MARKET订单没有价格，因此会使用 mark price 计算。
基本信息
API 基本信息
接口可能需要用户的 API Key，如何创建API-KEY请参考这里
本篇列出接口的 base URL 有:
https://api.binance.com
https://api-gcp.binance.com
https://api1.binance.com
https://api2.binance.com
https://api3.binance.com
https://api4.binance.com
上述列表的最后4个接口 (api1-api4) 可能会提供更好的性能，但其稳定性略为逊色。因此，请务必使用最适合您现有配置的那款。
所有接口的响应都是 JSON 格式。
响应中如有数组，数组元素以时间升序排列，越早的数据越提前。
所有时间、时间戳均为UNIX时间，单位为毫秒。
对于仅发送公开市场数据的 API，您可以使用 base URL https://data-api.binance.vision 。
GET /api/v3/aggTrades
GET /api/v3/avgPrice
GET /api/v3/depth
GET /api/v3/exchangeInfo
GET /api/v3/klines
GET /api/v3/ping
GET /api/v3/ticker
GET /api/v3/ticker/24hr
GET /api/v3/ticker/bookTicker
GET /api/v3/ticker/price
GET /api/v3/time
GET /api/v3/trades
GET /api/v3/uiKlines
HTTP 返回代码
HTTP 4XX 错误码用于指示错误的请求内容、行为、格式。问题在于请求者。
HTTP 403 错误码表示违反WAF限制(Web应用程序防火墙)。
HTTP 409 错误码表示重新下单(cancelReplace)的请求部分成功。(比如取消订单失败，但是下单成功了)
HTTP 429 错误码表示警告访问频次超限，即将被封IP。
HTTP 418 表示收到429后继续访问，于是被封了。
HTTP 5XX 错误码用于指示Binance服务侧的问题。
接口错误代码
使用接口 /api/v3, 以及 /sapi/v1/margin时, 每个接口都有可能抛出异常;
API 与 SAPI 的错误代码返回形式如下:

{
  "code": -1121,
  "msg": "Invalid symbol."
}

具体的错误码及其解释在 错误代码.
接口的基本信息
GET 方法的接口, 参数必须在 query string中发送。
POST, PUT, 和 DELETE 方法的接口,参数可以在内容形式为application/x-www-form-urlencoded的 query string 中发送，也可以在 request body 中发送。 如果你喜欢，也可以混合这两种方式发送参数。
对参数的顺序不做要求。
但如果同一个参数名在query string和request body中都有，query string中的会被优先采用。
访问限制
访问限制基本信息
以下 是intervalLetter 作为头部值:

SECOND => S
MINUTE => M
HOUR => H
DAY => D
在 /api/v3/exchangeInfo rateLimits 数组中包含与交易的有关RAW_REQUESTS，REQUEST_WEIGHT和ORDERS速率限制相关的对象。这些在 限制种类 (rateLimitType) 下的 枚举定义 部分中进一步定义。

违反任何一个速率限制时（访问频次限制或下单速率限制），将返回429。

IP 访问限制
每个请求将包含一个X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter)的头，其中包含当前IP所有请求的已使用权重。
每一个接口均有一个相应的权重(weight)，有的接口根据参数不同可能拥有不同的权重。越消耗资源的接口权重就会越大。
收到429时，您有责任停止发送请求，不得滥用API。
收到429后仍然继续违反访问限制，会被封禁IP，并收到418错误码
频繁违反限制，封禁时间会逐渐延长，从最短2分钟到最长3天。
Retry-After的头会与带有418或429的响应发送，并且会给出以秒为单位的等待时长(如果是429)以防止禁令，或者如果是418，直到禁令结束。
访问限制是基于IP的，而不是API Key
建议您尽可能多地使用websocket消息获取相应数据，以减少请求带来的访问限制压力。
###下单频率限制

每个成功的下单回报将包含一个X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter)的头，其中包含当前账户已用的下单限制数量。
当下单数超过限制时，会收到带有429但不含Retry-After头的响应。请检查 GET api/v3/exchangeInfo 的下单频率限制 (rateLimitType = ORDERS) 并等待封禁时间结束。
被拒绝或不成功的下单并不保证回报中包含以上头内容。
下单频率限制是基于每个账户计数的。
用户可以通过接口 GET api/v3/rateLimit/order 来查询当前的下单量.
WEB SOCKET 连接限制
Websocket服务器每秒最多接受5个消息。消息包括:
PING帧
PONG帧
JSON格式的消息, 比如订阅, 断开订阅.
如果用户发送的消息超过限制，连接会被断开连接。反复被断开连接的IP有可能被服务器屏蔽。
单个连接最多可以订阅 1024 个Streams。
每IP地址、每5分钟最多可以发送300次连接请求。
/api/ 与 /sapi/ 接口限频说明
/api/*接口和 /sapi/*接口采用两套不同的访问限频规则, 两者互相独立。

/api/*的接口相关：

按IP和按UID(account)两种模式分别统计, 两者互相独立。
以 /api/*开头的接口按IP限频，且所有接口共用每分钟6,000限制。
每个请求将包含一个 X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter)的头，包含当前IP所有请求的已使用权重。
每个成功的下单回报将包含一个X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter)的头，其中包含当前账户已用的下单限制数量。
/sapi/*的接口相关：

按IP和按UID(account)两种模式分别统计, 两者互相独立。
以/sapi/*开头的接口采用单接口限频模式。按IP统计的权重单接口权重总额为每分钟12000；按照UID统计的单接口权重总额是每分钟180000。
每个接口会标明是按照IP或者按照UID统计, 以及相应请求一次的权重值。
按照IP统计的接口, 请求返回头里面会包含X-SAPI-USED-IP-WEIGHT-1M=<value>或X-SAPI-USED-IP-WEIGHT-1S=<value>, 包含当前IP所有请求已使用权重。
按照UID统计的接口, 请求返回头里面会包含X-SAPI-USED-UID-WEIGHT-1M=<value>或X-SAPI-USED-UID-WEIGHT-1S=<value>, 包含当前账户所有已用的UID权重。
数据来源
因为API系统是异步的, 所以返回的数据有延时很正常, 也在预期之中。
在每个接口中，列出了其数据的来源，可以用于理解数据的时效性。
系统一共有3个数据来源，按照更新速度的先后排序。排在前面的数据最新，在后面就有可能存在延迟。

撮合引擎 - 表示数据来源于撮合引擎
缓存 - 表示数据来源于内部或者外部的缓存
数据库 - 表示数据直接来源于数据库
有些接口有不止一个数据源, 比如 `缓存 => 数据库`, 这表示接口会先从第一个数据源检查，如果没有数据，则检查下一个数据源。
接口鉴权类型
每个接口都有自己的鉴权类型，鉴权类型决定了访问时应当进行何种鉴权。
鉴权类型会在本文档中各个接口名称旁声明，如果没有特殊声明即默认为 NONE。
如果需要 API-keys，应当在HTTP头中以 X-MBX-APIKEY字段传递。
API-keys 与 secret-keys 是大小写敏感的。
API-keys可以被配置为只拥有访问一些接口的权限。 例如, 一个 API-key 仅可用于发送交易指令, 而另一个 API-key 则可访问除交易指令外的所有路径。
默认 API-keys 可访问所有鉴权路径.
鉴权类型	描述
NONE	不需要鉴权的接口
TRADE	需要有效的 API-Key 和签名
MARGIN	需要有效的 API-Key 和签名
USER_DATA	需要有效的 API-Key 和签名
USER_STREAM	需要有效的 API-Key
MARKET_DATA	需要有效的 API-Key
TRADE, MARGIN 和USER_DATA 接口是 签名(SIGNED)接口.
SIGNED (TRADE、USER_DATA AND MARGIN) Endpoint security
调用SIGNED 接口时，除了接口本身所需的参数外，还需要在query string 或 request body中传递 signature, 即签名参数。
签名 大小写不敏感.
各种签名方式(比如 HMAC, RSA, Ed25519)，请参考下面的签名的示例。
时间同步安全
签名接口均需要传递 timestamp参数，其值应当是请求发送时刻的unix时间戳(毫秒)。
服务器收到请求时会判断请求中的时间戳，如果是5000毫秒之前发出的，则请求会被认为无效。这个时间空窗值可以通过发送可选参数 recvWindow来定义。
逻辑伪代码如下:

  if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow)
  {
    // process request
  } 
  else 
  {
    // reject request
  }

关于交易时效性 互联网状况并不完全稳定可靠,因此你的程序本地到币安服务器的时延会有抖动。这是我们设置recvWindow的目的所在，如果你从事高频交易，对交易时效性有较高的要求，可以灵活设置recvWindow以达到你的要求。

推荐使用5秒以下的 recvWindow! 最多不能超过 60秒!
POST /api/v3/order 的示例 - HMAC Keys
以下是在 linux bash 环境下使用 echo openssl 和 curl 工具实现的一个调用接口下单的示例 apikey、secret仅供示范

Key	Value
apiKey	vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A
secretKey	NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j
参数	取值
symbol	LTCBTC
side	BUY
type	LIMIT
timeInForce	GTC
quantity	1
price	0.1
recvWindow	5000
timestamp	1499827319559
示例 1: 所有参数通过 request body 发送

示例 1

HMAC SHA256 signature:

    $ echo -n "symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559" | openssl dgst -sha256 -hmac "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j"
    (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71


curl command:

    (HMAC SHA256)
    $ curl -H "X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" -X POST 'https://api.binance.com/api/v3/order' -d 'symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'
    


requestBody:
symbol=LTCBTC
&side=BUY
&type=LIMIT
&timeInForce=GTC
&quantity=1
&price=0.1
&recvWindow=5000
&timestamp=1499827319559

示例 2: 所有参数通过 query string 发送

示例 2

HMAC SHA256 signature:

    $ echo -n "symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559" | openssl dgst -sha256 -hmac "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j"
    (stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71
    


curl command:

    (HMAC SHA256)
   $ curl -H "X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'
    


queryString:
symbol=LTCBTC
&side=BUY
&type=LIMIT
&timeInForce=GTC
&quantity=1
&price=0.1
&recvWindow=5000
&timestamp=1499827319559

示例 3: 混合使用 query string 和 request body

示例 3

HMAC SHA256 signature:

   $ echo -n "symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTCquantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559" | openssl dgst -sha256 -hmac "NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j"
    (stdin)= 0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77
    


curl command:

    (HMAC SHA256)
    $ curl -H "X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A" -X POST 'https://api.binance.com/api/v3/order?symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC' -d 'quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559&signature=0fd168b8ddb4876a0358a8d14d0c9f3da0e9b20c5d52b2a00fcf7d1c602f9a77'


queryString:
symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC

requestBody:
quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559

请注意，签名与示例3不同。 "GTC"和"quantity = 1"之间没有＆。

POST /api/v3/order 的示例 - RSA Keys
这将逐步介绍如何通过有效的签名发送 payload。
我们接受 PKCS#8 格式的 RSA Key。
要获取 API Key，您需要在您的账户上上传您的 RSA Public Key。
对于这个例子，Private Key 将被引用为test-prv-key.pem。

Key	Value
apiKey	CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ
参数	取值
symbol	BTCUSDT
side	SELL
type	LIMIT
timeInForce	GTC
quantity	1
price	0.2
recvWindow	5000
timestamp	1668481559918
有列出参数的签名 payload：

symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000


第1步: Payload

将参数列表排列成一个 string。 用 & 分隔每个参数。对于上述参数，签名 payload 如右所示。

第2步: 计算签名

2.1 - 将签名有效负载编码为 ASCII 数据。

第2.2步

 $ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem


2.2 - 使用带有 SHA-256 hash 函数的 RSASSA-PKCS1-v1_5 算法对 payload 进行签名。

第2.3步

$ echo -n 'symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000' | openssl dgst -sha256 -sign ./test-prv-key.pem | openssl enc -base64 -A
HZ8HOjiJ1s/igS9JA+n7+7Ti/ihtkRF5BIWcPIEluJP6tlbFM/Bf44LfZka/iemtahZAZzcO9TnI5uaXh3++lrqtNonCwp6/245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH+XxaCmR0WcvlKjNQnp12/eKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang/1WOq+Jaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT/fNnMRxFc7u+j3qI//5yuGuu14KR0MuQKKCSpViieD+fIti46sxPTsjSemoUKp0oXA==


2.3 - 将输出编码为 base64 string。

第2.4步

HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D


2.4 - 由于签名可能包含 / 和 =，这可能会导致发送请求时出现问题。 所以签名必须是 URL 编码的。

第2.5步

 curl -H "X-MBX-APIKEY: CAvIjXy3F44yW6Pou5k8Dy1swsYDWJZLeoK2r8G4cFDnE9nosRppc2eKc1T8TRTQ" -X POST 'https://api.binance.com/api/v3/order?symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2&timestamp=1668481559918&recvWindow=5000&signature=HZ8HOjiJ1s%2FigS9JA%2Bn7%2B7Ti%2FihtkRF5BIWcPIEluJP6tlbFM%2FBf44LfZka%2FiemtahZAZzcO9TnI5uaXh3%2B%2BlrqtNonCwp6%2F245UFWkiW1elpgtVAmJPbogcAv6rSlokztAfWk296ZJXzRDYAtzGH0gq7CgSJKfH%2BXxaCmR0WcvlKjNQnp12%2FeKXJYO4tDap8UCBLuyxDnR7oJKLHQHJLP0r0EAVOOSIbrFang%2F1WOq%2BJaq4Efc4XpnTgnwlBbWTmhWDR1pvS9iVEzcSYLHT%2FfNnMRxFc7u%2Bj3qI%2F%2F5yuGuu14KR0MuQKKCSpViieD%2BfIti46sxPTsjSemoUKp0oXA%3D%3D'


2.5 - curl 命令

Bash 脚本

#!/usr/bin/env bash

# 设置身份验证：
API_KEY="替换成您的 API Key"
PRIVATE_KEY_PATH="test-prv-key.pem"

# 设置您的请求:
API_METHOD="POST"
API_CALL="api/v3/order"
API_PARAMS="symbol=BTCUSDT&side=SELL&type=LIMIT&timeInForce=GTC&quantity=1&price=0.2"

# 计算签名：
timestamp=$(date +%s000)
api_params_with_timestamp="$API_PARAMS&timestamp=$timestamp"
signature=$(echo -n "$api_params_with_timestamp" \
            | openssl dgst -sha256 -sign "$PRIVATE_KEY_PATH" \
            | openssl enc -base64 -A)

# 发送请求：
curl -H "X-MBX-APIKEY: $API_KEY" -X "$API_METHOD" \
    "https://api.binance.com/$API_CALL?$api_params_with_timestamp" \
    --data-urlencode "signature=$signature"

右边有示例 Bash 脚本执行上述类似的步骤.

POST /api/v3/order 的示例 - Ed25519 Keys
*我们建议使用 Ed25519 API keys**，因为它在所有受支持的 API key 类型中提供最佳性能和安全性。
参数	取值
symbol	BTCUSDT
side	SELL
type	LIMIT
timeInForce	GTC
quantity	1
price	0.2
timestamp	1668481559918
Python 脚本

#!/usr/bin/env python3
import base64
import requests
import time
from cryptography.hazmat.primitives.serialization import load_pem_private_key
# 设置身份验证：
API_KEY='替换成您的 API Key'
PRIVATE_KEY_PATH='test-prv-key.pem'
# 加载 private key。
# 在这个例子中，private key 没有加密，但我们建议使用强密码以提高安全性。
with open(PRIVATE_KEY_PATH, 'rb') as f:
    private_key = load_pem_private_key(data=f.read(), password=None)
# 设置请求参数：
params = {
    'symbol':       'BTCUSDT',
    'side':         'SELL',
    'type':         'LIMIT',
    'timeInForce':  'GTC',
    'quantity':     '1.0000000',
    'price':        '0.20',
}
# 参数中加时间戳：
timestamp = int(time.time() * 1000) # 以毫秒为单位的 UNIX 时间戳
params['timestamp'] = timestamp
# 参数中加签名：
payload = '&'.join([f'{param}={value}' for param, value in params.items()])
signature = base64.b64encode(private_key.sign(payload.encode('ASCII')))
params['signature'] = signature
# 发送请求：
headers = {
    'X-MBX-APIKEY': API_KEY,
}
response = requests.post(
    'https://api.binance.com/api/v3/order',
    headers=headers,
    data=params,
)
print(response.json())

右边有 Python 脚本来示例如何使用 Ed25519 key 签名。
错误代码
错误JSON格式:

{
  "code":-1121,
  "msg":"Invalid symbol."
}

错误由两部分组成：错误代码和消息。 代码是通用的，但是消息可能会有所不同。

10xx -常规服务器或网络问题
-1000 UNKNOWN
处理请求时发生未知错误。
处理请求时发生未知错误。[%s]
-1001 DISCONNECTED
内部错误; 无法处理您的请求。 请再试一次.
-1002 UNAUTHORIZED
您无权执行此请求。
-1003 TOO_MANY_REQUESTS
排队的请求过多。
请求权重过多； 当前限制是 %s 每 %s 的请求权重。 请使用 Websocket Streams 进行实时更新，以避免轮询API。
请求权重过多； IP被禁止，直到％s。 请使用 Websocket Streams 进行实时更新，以免被禁。
-1004 SERVER_BUSY
服务器正忙，请稍候再试。
-1006 UNEXPECTED_RESP
从消息总线收到意外的响应。 执行状态未知。
-1007 TIMEOUT
等待后端服务器响应超时。 发送状态未知； 执行状态未知。
-1008 SERVER_BUSY
现货交易服务器当前因其他请求而过载。 请在几分钟后重试。
-1014 UNKNOWN_ORDER_COMPOSITION
不支持的订单组合。
-1015 TOO_MANY_ORDERS
新订单太多。
新订单太多； 当前限制为每％s ％s个订单。
-1016 SERVICE_SHUTTING_DOWN
该服务不可用。
-1020 UNSUPPORTED_OPERATION
不支持此操作。
-1021 INVALID_TIMESTAMP
此请求的时间戳在recvWindow之外。
此请求的时间戳比服务器时间提前1000毫秒。
-1022 INVALID_SIGNATURE
此请求的签名无效。
-1099 Not found, authenticated, or authorized
替换错误代码-1999
11xx - 2xxx Request issues
-1100 ILLEGAL_CHARS
在参数中发现非法字符。
在参数中发现非法字符。％s
在参数％s中发现非法字符； 合法范围是％s。
-1101 TOO_MANY_PARAMETERS
为此端点发送的参数太多。
参数太多； 预期为％s并收到了％s。
检测到的参数值重复。
-1102 MANDATORY_PARAM_EMPTY_OR_MALFORMED
未发送强制性参数，该参数为空/空或格式错误。
强制参数％s未发送，为空/空或格式错误。
必须发送参数％s或％s，但两者均为空！
-1103 UNKNOWN_PARAM
发送了未知参数。
-1104 UNREAD_PARAMETERS
并非所有发送的参数都被读取。
并非所有发送的参数都被读取； 读取了％s参数，但被发送了％s。
-1105 PARAM_EMPTY
参数为空。
参数％s为空。
-1106 PARAM_NOT_REQUIRED
不需要时已发送参数。
不需要时发送参数％s。
-1111 BAD_PRECISION
精度超过为此资产定义的最大值。
-1112 NO_DEPTH
交易对没有挂单。
-1114 TIF_NOT_REQUIRED
不需要时发送了TimeInForce参数。
-1115 INVALID_TIF
无效 timeInForce.
-1116 INVALID_ORDER_TYPE
无效订单类型。
-1117 INVALID_SIDE
无效买卖方向。
-1118 EMPTY_NEW_CL_ORD_ID
新的客户订单ID为空。
-1119 EMPTY_ORG_CL_ORD_ID
客户自定义的订单ID为空。
-1120 BAD_INTERVAL
无效时间间隔。
-1121 BAD_SYMBOL
无效的交易对。
-1125 INVALID_LISTEN_KEY
该listenKey不存在。
-1127 MORE_THAN_XX_HOURS
查询间隔太大。
从开始时间到结束时间之间超过％s小时。
-1128 OPTIONAL_PARAMS_BAD_COMBO
可选参数组合无效。
-1130 INVALID_PARAMETER
发送的参数为无效数据。
发送参数％s的数据无效。
-1131 BAD_RECV_WINDOW
recvWindow 必须小于 60000
-1134 BAD_STRATEGY_TYPE
strategyType 必须小于 1000000
-1145 INVALID_CANCEL_RESTRICTIONS
cancelRestrictions 必须是 ONLY_NEW 或者 ONLY_PARTIALLY_FILLED。
-1151 重复的交易对
Symbol is present multiple times in the list.
-2010 NEW_ORDER_REJECTED
新订单被拒绝
-2011 CANCEL_REJECTED
取消订单被拒绝
-2013 NO_SUCH_ORDER
订单不存在。
-2014 BAD_API_KEY_FMT
API-key 格式无效。
-2015 REJECTED_MBX_KEY
无效的API密钥，IP或操作权限。
-2016 NO_TRADING_WINDOW
找不到该交易对的交易窗口。 尝试改为24小时自动报价。
-2026 ORDER_ARCHIVED
订单已被存档因为此订单被取消或过期，无交易数量而最后的更新已超过 90 天前。
3xxx-5xxx SAPI 具体问题
-3000 INNER_FAILURE
内部服务器错误。
-3001 NEED_ENABLE_2FA
请先启用2FA。
-3002 ASSET_DEFICIENCY
此资产不存在。
-3003 NO_OPENED_MARGIN_ACCOUNT
杠杆账户不存在。
-3004 TRADE_NOT_ALLOWED
禁止交易。
-3005 TRANSFER_OUT_NOT_ALLOWED
不允许转账。
-3006 EXCEED_MAX_BORROWABLE
您的已借金额已超过最高可借金额。
-3007 HAS_PENDING_TRANSACTION
您有待处理的交易，请稍后再试。
-3008 BORROW_NOT_ALLOWED
不允许借款。
-3009 ASSET_NOT_MORTGAGEABLE
此资产目前不允许转入杠杆账户。
-3010 REPAY_NOT_ALLOWED
不允许还款。
-3011 BAD_DATE_RANGE
您输入的日期无效。
-3012 ASSET_ADMIN_BAN_BORROW
此资产禁止借款。
-3013 LT_MIN_BORROWABLE
借入金额少于最低借入金额。
-3014 ACCOUNT_BAN_BORROW
此帐户禁止借款。
-3015 REPAY_EXCEED_LIABILITY
还款额超过借款额。
-3016 LT_MIN_REPAY
还款额少于最低还款额。
-3017 ASSET_ADMIN_BAN_MORTGAGE
此资产目前不允许转入保证金账户。
-3018 ACCOUNT_BAN_MORTGAGE
此帐户已禁止转入。
-3019 ACCOUNT_BAN_ROLLOUT
此帐户禁止转出。
-3020 EXCEED_MAX_ROLLOUT
转出金额超过上限。
-3021 PAIR_ADMIN_BAN_TRADE
杠杆账户无法交易此交易对。
-3022 ACCOUNT_BAN_TRADE
账号被禁止交易。
-3023 WARNING_MARGIN_LEVEL
无法在当前杠杆倍数下转出资金或者下单
-3024 FEW_LIABILITY_LEFT
付款之后未付款的债务太小
-3025 INVALID_EFFECTIVE_TIME
输入时间有误。
-3026 VALIDATION_FAILED
输入参数有误。
-3027 NOT_VALID_MARGIN_ASSET
无效的杠杆资产。
-3028 NOT_VALID_MARGIN_PAIR
无效的杠杆交易对。
-3029 TRANSFER_FAILED
转账失败。
-3036 ACCOUNT_BAN_REPAY
此账号无法还款。
-3037 PNL_CLEARING
PNL正在清帐，请稍等。
-3038 LISTEN_KEY_NOT_FOUND
找不到Listen key
-3041 BALANCE_NOT_CLEARED
余额不足
-3042 PRICE_INDEX_NOT_FOUND
该杠杆交易对无可用价格指数。
-3043 TRANSFER_IN_NOT_ALLOWED
不允许转入。
-3044 SYSTEM_BUSY
系统繁忙。
-3045 SYSTEM
系统目前没有足够可借的资产。
-3999 NOT_WHITELIST_USER
此功能只面向邀请的用户。
-4001 CAPITAL_INVALID
非法操作
-4002 CAPITAL_IG
非法获取
-4003 CAPITAL_IEV
非法邮箱验证
-4004 CAPITAL_UA
未登录或者认证。
-4005 CAPAITAL_TOO_MANY_REQUEST
请求太频繁。
-4006 CAPITAL_ONLY_SUPPORT_PRIMARY_ACCOUNT
只支持主账号。
-4007 CAPITAL_ADDRESS_VERIFICATION_NOT_PASS
地址的没有通过校验。
-4008 CAPITAL_ADDRESS_TAG_VERIFICATION_NOT_PASS
地址的标记信息(tag)没有通过校验。
-4010 CAPITAL_WHITELIST_EMAIL_CONFIRM
确认电子邮件已经列入白名单。
-4011 CAPITAL_WHITELIST_EMAIL_EXPIRED
列入白名单的电子邮件无效。
-4012 CAPITAL_WHITELIST_CLOSE
白名单未打开。
-4013 CAPITAL_WITHDRAW_2FA_VERIFY
2FA未打开。
-4014 CAPITAL_WITHDRAW_LOGIN_DELAY
在登录后的2分钟之内不允许提款。
-4015 CAPITAL_WITHDRAW_RESTRICTED_MINUTE
暂停提款
-4016 CAPITAL_WITHDRAW_RESTRICTED_PASSWORD
在密码修改后的24小时之内不允许提款。
-4017 CAPITAL_WITHDRAW_RESTRICTED_UNBIND_2FA
在2FA发行后的24小时之内不允许提款。
-4018 CAPITAL_WITHDRAW_ASSET_NOT_EXIST
此资产不存在。
-4019 CAPITAL_WITHDRAW_ASSET_PROHIBIT
此资产不允许提款。
-4021 CAPITAL_WITHDRAW_AMOUNT_MULTIPLE
资产的提款数量必须是％s的％s倍。
-4022 CAPITAL_WITHDRAW_MIN_AMOUNT
不须少于最低的提款数量％s。
-4023 CAPITAL_WITHDRAW_MAX_AMOUNT
在24小时之内，不须超过最高的提款数量。
-4024 CAPITAL_WITHDRAW_USER_NO_ASSET
当前用户没有此资产。
-4025 CAPITAL_WITHDRAW_USER_ASSET_LESS_THAN_ZERO
持有资产的数量小于零。
-4026 CAPITAL_WITHDRAW_USER_ASSET_NOT_ENOUGH
此资产余额不足。
-4027 CAPITAL_WITHDRAW_GET_TRAN_ID_FAILURE
无法获取tranId。
-4028 CAPITAL_WITHDRAW_MORE_THAN_FEE
提款金额必须多于佣金额。
-4029 CAPITAL_WITHDRAW_NOT_EXIST
此提款记录不存在。
-4030 CAPITAL_WITHDRAW_CONFIRM_SUCCESS
提款资产成功。
-4031 CAPITAL_WITHDRAW_CANCEL_FAILURE
取消提款失败。
-4032 CAPITAL_WITHDRAW_CHECKSUM_VERIFY_FAILURE
验证提款失败。
-4033 CAPITAL_WITHDRAW_ILLEGAL_ADDRESS
提款地址不合法。
-4034 CAPITAL_WITHDRAW_ADDRESS_CHEAT
当前地址有异常。
-4035 CAPITAL_WITHDRAW_NOT_WHITE_ADDRESS
此地址不在白名单上。请加入然后重试。
-4036 CAPITAL_WITHDRAW_NEW_ADDRESS
新地址在{0}小时后才可以提款。
-4037 CAPITAL_WITHDRAW_RESEND_EMAIL_FAIL
重新发送邮件失败。
-4038 CAPITAL_WITHDRAW_RESEND_EMAIL_TIME_OUT
请5分钟后重试。
-4039 CAPITAL_USER_EMPTY
用户不存在。
-4041 CAPITAL_MINUTE_TOO_SMALL
请一分钟后重试。
-4042 CAPITAL_CHARGE_NOT_RESET
资产无法重新获取存款地址。
-4043 CAPITAL_ADDRESS_TOO_MUCH
在24小时之内充值超过100多个地址。
-4044 CAPITAL_BLACKLIST_COUNTRY_GET_ADDRESS
此国家在黑名单上。
-4045 CAPITAL_GET_ASSET_ERROR
获得资产失败。
-4046 CAPITAL_AGREEMENT_NOT_CONFIRMED
协议未确认。
-4047 CAPITAL_DATE_INTERVAL_LIMIT
时间间隔必须在0-90天之内
-4060 CAPITAL_WITHDRAW_USER_ASSET_LOCK_DEPOSIT
体现仍在区块确认中，暂时锁定部分资产
-5001 ASSET_DRIBBLET_CONVERT_SWITCH_OFF
不允许转移到微型资产。
-5002 ASSET_ASSET_NOT_ENOUGH
此余额不足。
-5003 ASSET_USER_HAVE_NO_ASSET
此资产不存在。
-5004 USER_OUT_OF_TRANSFER_FLOAT
剩余余额已超过0.001BTC，请重新选择。
％s的剩余余额已超过0.001BTC，请重新选择。
-5005 USER_ASSET_AMOUNT_IS_TOO_LOW
BTC的剩余余额太低，请重新选择。
％s的剩余余额太低，请重新选择。
-5006 USER_CAN_NOT_REQUEST_IN_24_HOURS
24小时内只能转账一次。
-5007 AMOUNT_OVER_ZERO
数量必须大于零。
-5008 ASSET_WITHDRAW_WITHDRAWING_NOT_ENOUGH
可退回资产的金额不足。
-5009 PRODUCT_NOT_EXIST
产品不存在。
-5010 TRANSFER_FAIL
资产转移失败。
-5011 FUTURE_ACCT_NOT_EXIST
合约帐户不存在。
-5012 TRANSFER_PENDING
资产转移正在进行中。
-5021 PARENT_SUB_HAVE_NO_RELATION
当前的子账户和母账户没有从属关系。
-5012 FUTURE_ACCT_OR_SUBRELATION_NOT_EXIST
合约帐户或子账户关系不存在。
6XXX - 币安宝相关
-6001 DAILY_PRODUCT_NOT_EXIST
理财产品不存在.
-6003 DAILY_PRODUCT_NOT_ACCESSIBLE
产品不存在或者没有权限。
-6004 DAILY_PRODUCT_NOT_PURCHASABLE
产品无法购买。
-6005 DAILY_LOWER_THAN_MIN_PURCHASE_LIMIT
低于可以购买的最小限额。
-6006 DAILY_REDEEM_AMOUNT_ERROR
赎回额度有误。
-6007 DAILY_REDEEM_TIME_ERROR
不在赎回的时间内。
-6008 DAILY_PRODUCT_NOT_REDEEMABLE
产品暂时无法赎回。
-6009 REQUEST_FREQUENCY_TOO_HIGH
发送请求太频繁。
-6011 EXCEEDED_USER_PURCHASE_LIMIT
超购每个月用户可以申购的最大次数。
-6012 BALANCE_NOT_ENOUGH
余额不足。
-6013 PURCHASING_FAILED
申购失败。
-6014 UPDATE_FAILED
超过可以申购的最大上限。
-6015 EMPTY_REQUEST_BODY
请求的body为空。
-6016 PARAMS_ERR
请求的参数有误。
-6017 NOT_IN_WHITELIST
不在白名单里面。
-6018 ASSET_NOT_ENOUGH
资产不足。
-6019 PENDING
需要进一步确认。
-6020 PROJECT_NOT_EXISTS
此项目不存在。
70xx - 期货
-7001 FUTURES_BAD_DATE_RANGE
此日期范围不支持。
-7002 FUTURES_BAD_TYPE
此数据请求类型不支持。
20xxx - 合约/现货策略交易
-20121 Invalid symbol
无效交易对。
-20124 Invalid algo id or it has been completed
无效的策略订单ID或者它已经被执行。
-20130 Invalid data sent for a parameter
无效数据。
-20132 The client algo id is duplicated
用户自定义策略订单ID重复。
-20194 Duration is too short to execute all required quantity
Duration 时间太短不足以执行用户选择的订单数量。
-20195 The total size is too small
下单数量太小。
-20196 The total size is too large
下单数量太大。
-20198 Reach the max open orders allowed
达到了最大挂单上限。
-20204 The notional of USD is less or more than the limit
订单小于最小USD名义价值
过滤器故障
报错信息	描述
"Filter failure: PRICE_FILTER"	"价格"过高，过低和/或不遵循交易对的最小价格规则。
"Filter failure: PERCENT_PRICE"	"价格"比最近Y分钟的平均加权价格高X％或X％太低。
"Filter failure: PERCENT_PRICE_BY_SIDE"	price 在当前方向上(BUY或者SELL)比lastPrice价格超过X%或者低于Y%。
"Filter failure: LOT_SIZE"	"数量"太高，太低和/或不遵循该交易对的步长规则。
"Filter failure: MIN_NOTIONAL"	价格*数量太低，无法成为该交易对的有效订单。
"Filter failure: ICEBERG_PARTS"	ICEBERG 订单会分成太多部分； icebergQty太小。
"Filter failure: MARKET_LOT_SIZE"	"MARKET"订单的"数量"过高，过低和/或未遵循交易对的步长规则。
"Filter failure: MAX_POSITION"	达到账户的最大仓位限制。这包括了账户的余额总额，以及所有处于open的买单的数量总和。
"Filter failure: MAX_NUM_ORDERS"	客户在交易对上有太多挂单。
"Filter failure: MAX_ALGO_ORDERS"	账户有太多未平仓止损和/或在交易对上执行获利指令。
"Filter failure: MAX_NUM_ICEBERG_ORDERS"	客户在交易对上有太多 iceberg 挂单。
"Filter failure: TRAILING_DELTA"	trailingDelta 值不在限定的范围内.
"Filter failure: EXCHANGE_MAX_NUM_ORDERS"	帐户上的交易所有太多挂单。
"Filter failure: EXCHANGE_MAX_ALGO_ORDERS"	帐户有太多止损挂单和/或在交易所收取获利指令。
10xxx - 质押借币
-10001 SYSTEM_MAINTENANCE
系统维护中，请稍后再试
-10002 INVALID_INPUT
无效的输入参数
-10005 NO_RECORDS
暂无记录
-10007 COIN_NOT_LOANABLE
该币种暂不支持借贷
-10008 COIN_NOT_LOANABLE
该币种暂不支持借贷
-10009 COIN_NOT_COLLATERAL
该币种暂不支持抵押
-10010 COIN_NOT_COLLATERAL
该币种暂不支持抵押
-10011 INSUFFICIENT_ASSET
现货资产不足
-10012 INVALID_AMOUNT
无效的还款金额
-10013 INSUFFICIENT_AMOUNT
抵押资产不足
-10015 DEDUCTION_FAILED
抵押资产扣款失败
-10016 LOAN_FAILED
放贷失败
-10017 REPAY_EXCEED_DEBT
还款金额超过负债金额
-10018 INVALID_AMOUNT
无效的还款金额
-10019 CONFIG_NOT_EXIST
配置不存在
-10020 UID_NOT_EXIST
用户ID不存在
-10021 ORDER_NOT_EXIST
订单不存在
-10022 INVALID_AMOUNT
无效的调整金额
-10023 ADJUST_LTV_FAILED
调整质押率失败
-10024 ADJUST_LTV_NOT_SUPPORTED
暂不支持调整质押率
-10025 REPAY_FAILED
还款失败
-10026 INVALID_PARAMETER
无效的参数
-10028 INVALID_PARAMETER
无效的参数
-10029 AMOUNT_TOO_SMALL
借贷金额过小
-10030 AMOUNT_TOO_LARGE
借贷金额过大
-10031 QUOTA_REACHED
已达到个人借贷限额
-10032 REPAY_NOT_AVAILABLE
暂不支持换款
-10034 REPAY_NOT_AVAILABLE
抵押物还款暂时不支持，请尝试用借贷币还款。
-10039 AMOUNT_TOO_SMALL
还款金额过小
-10040 AMOUNT_TOO_LARGE
还款金额过大
-10041 INSUFFICIENT_AMOUNT
由于借贷需求过多，系统剩余可借{0}额度不足。请调整借贷金额或明天再试。
-10042 ASSET_NOT_SUPPORTED
暂不支持%s币种
-10043 ASSET_NOT_SUPPORTED
暂不支持{0} 借贷
-10044 QUOTA_REACHED
抵押物数量已达到限额，请调整抵押金额或使用其他抵押资产。
-10045 COLLTERAL_REPAY_NOT_SUPPORTED
该借贷币种暂不支持抵押物还款，请稍后再试。
-10046 EXCEED_MAX_ADJUSTMENT
调整抵押物超过最大限额，请重试。
-10047 REGION_NOT_SUPPORTED
受当地法规管制，您所在地区暂不支持该币种。

13xxx - 杠杆代币
-13000 BLVT_FORBID_REDEEM
当前该杠杆代币关闭赎回
-13001 BLVT_EXCEED_DAILY_LIMIT
超过该代币个人24小时赎回金额上限
-13002 BLVT_EXCEED_TOKEN_DAILY_LIMIT
超过该代币全局24小时赎回金额上限
-13003 BLVT_FORBID_PURCHASE
当前该杠杆代币关闭申购
-13004 BLVT_EXCEED_DAILY_PURCHASE_LIMIT
超过该代币个人24小时申购金额上限
-13005 BLVT_EXCEED_TOKEN_DAILY_PURCHASE_LIMIT
超过该代币全局24小时申购金额上限
-13006 BLVT_PURCHASE_LESS_MIN_AMOUNT
申购金额低于规定下限
-13007 BLVT_PURCHASE_AGREEMENT_NOT_SIGN
没有签署开通交易协议
12xxx - 流动性挖矿
-12014 TOO MANY REQUESTS
2秒内接收的请求数量多于1条
18xxx - 币安码
-18002
The total amount of codes you created has exceeded the 24-hour limit, please try again after UTC 0
24小时内制码总金额已超过限额，请UTC0点后再尝试
-18003
Too many codes created in 24 hours, please try again after UTC 0
24小时内制码总次数已超过限额，请UTC0点后再尝试
-18004
Too many invalid redeem attempts in 24 hours, please try again after UTC 0
24小时内兑现币安码输错次数已超过限额，请UTC0点后再尝试
-18005
Too many invalid verify attempts, please try later
参考号输错次数过多，请稍后再试
-18006
The amount is too small, please re-enter
金额过小，请重新输入
-18007
This token is not currently supported, please re-enter
尚未支持该币种，请重新输入
21xxx - 統一帳戶
-21001 USER_IS_NOT_UNIACCOUNT
尚未开通统一账户。
-21002 UNI_ACCOUNT_CANT_TRANSFER_FUTURE
统一账户禁用margin向futures转账。
-21003 NET_ASSET_MUST_LTE_RATIO
margin资产更新失败。
-21004 USER_NO_LIABILITY
用户不存在统一账户穿仓负债
-21005 NO_ENOUGH_ASSET
用户现货钱包BUSD资产不足以偿还统一账户穿仓负债
-21006 HAD_IN_PROCESS_REPAY
用户存在正在偿还的统一账户穿仓负债
-21007 IN_FORCE_LIQUIDATION
强平进行中，用户偿还统一账户穿仓负债失败
订单拒绝错误
以下错误代码表示撮合引擎返回的订单相关错误:

-1010 ERROR_MSG_RECEIVED
-2010 NEW_ORDER_REJECTED
-2011 CANCEL_REJECTED
结合以下消息将指示特定的错误：

错误信息	描述
"Unknown order sent."	找不到订单(通过"orderId"，"clientOrderId"，"origClientOrderId")
"Duplicate order sent."	clientOrderId已经被使用
"Market is closed."	该交易对不在交易范围
"Account has insufficient balance for requested action."	没有足够的资金来完成行动
"Market orders are not supported for this symbol."	交易对上未启用"MARKET"
"Iceberg orders are not supported for this symbol."	交易对上未启用icebergQty
"Stop loss orders are not supported for this symbol."	交易对上未启用 STOP_LOSS
"Stop loss limit orders are not supported for this symbol."	交易对上未启STOP_LOSS_LIMIT
"Take profit orders are not supported for this symbol."	交易对上未启用TAKE_PROFIT
"Take profit limit orders are not supported for this symbol."	交易对上未启用TAKE_PROFIT_LIMIT
"Price * QTY is zero or less."	price * quantity太小
"IcebergQty exceeds QTY."	icebergQty 必须少于订单数量
"This action is disabled on this account."	联系客户支持； 该账户已禁用了某些操作。
"This account may not place or cancel orders."	联系客户支持： 该账户已被禁用了交易操作。
"Unsupported order combination"	不允许组合orderType, timeInForce, stopPrice, 和/或 icebergQty 。
"Order would trigger immediately."	与最后交易价格相比，订单的止损价无效。
"Cancel order is invalid. Check origClientOrderId and orderId."	未发送origClientOrderId 或orderId 。
"Order would immediately match and take."	LIMIT_MAKER 订单类型将立即匹配并进行交易，而不是纯粹的生成订单。
"The relationship of the prices for the orders is not correct."	OCO订单中设置的价格不符合报价规则：

The rules are:

SELL Orders: Limit Price > Last Price > Stop Price

BUY Orders: Limit Price < Last Price < Stop Price
"OCO orders are not supported for this symbol"	OCO订单不支持该交易对
"Quote order qty market orders are not support for this symbol."	这个交易对，市价单不支持参数quoteOrderQty
"Trailing stop orders are not supported for this symbol."	此symbol不支持 trailingDelta ｜
"Order cancel-replace is not supported for this symbol."	此symbol不支持 POST /api/v3/order/cancelReplace 或者 order.cancelReplace (WebSocket API) ｜
"This symbol is not permitted for this account."	账户和交易对的权限不一致 (比如 SPOT, MARGIN 等)。｜
"This symbol is restricted for this account."	账户没有权限在此交易对交易 (比如账户只拥有 ISOLATED_MARGIN权限，则无法下SPOT 订单)。 ｜
"Order was not canceled due to cancel restrictions."	cancelRestrictions 设置为 ONLY_NEW 但订单状态不是 NEW
或
cancelRestrictions 设置为 ONLY_PARTIALLY_FILLED 但订单状态不是 PARTIALLY_FILLED。 ｜
关于 POST /api/v3/order/cancelReplace 的错误
-2021 Order cancel-replace partially failed
收到该错误码代表撤单或者下单失败。

-2022 Order cancel-replace failed.
收到该错误码代表撤单和下单都失败。

上一页