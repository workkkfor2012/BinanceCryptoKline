function main(config, profileName) {
  console.log(`开始处理配置文件: ${profileName}`);

  // 确保 proxies, proxy-groups, rules 字段存在
  if (!Array.isArray(config.proxies)) config.proxies = [];
  if (!Array.isArray(config['proxy-groups'])) config['proxy-groups'] = [];
  if (!Array.isArray(config.rules)) config.rules = [];

  // --- 步骤 1: 定义并创建所有新的代理组 ---
  const newGroups = [
    { name: 'my', type: 'load-balance', strategy: 'round-robin', url: 'http://www.gstatic.com/generate_204', interval: 300, proxies: [] },
    { name: 'OPENAI', type: 'select', proxies: [] },
    { name: 'myother', type: 'select', proxies: [] },
    { name: '币安api', type: 'load-balance', strategy: 'round-robin', url: 'http://www.gstatic.com/generate_204', interval: 300, proxies: [] },
    { name: 'cursor', type: 'load-balance', strategy: 'round-robin', url: 'http://www.gstatic.com/generate_204', interval: 300, proxies: [] },
    { name: 'high', type: 'select', proxies: [] },
    { name: 'low', type: 'select', proxies: [] },
    { name: '所有节点', type: 'load-balance', strategy: 'round-robin', url: 'http://www.gstatic.com/generate_204', interval: 300, proxies: [] }
  ];

  // --- 步骤 2: 定义正则表达式并填充代理组 ---
  const allProxyNames = config.proxies.map(p => p.name);
  const groupFilters = {
    '币安api': /^(.*)(Hong|香港|新加坡|台湾|日本|Japan)+(.*)$/,
    'my': /^(.*)(Hong|香港|台湾|日本|Japan)+(.*)$/,
    'OPENAI': /^(.*)(USA|UK|美国|英国|日本|JP|Japan)+(.*)$/, // 修正了 "||"
    'myother': /^(.*)(日本|JP|Japan|英国|TW|台湾|UK)+(.*)$/,
    'cursor': /^(.*)(高级 IEPL 中继 1)+(.*)$/,
    'high': /^(.*)(高级)(.*)$/,
    'low': /^(.*)(实验)+(.*)$/,
    '所有节点': /^.*$/
  };

  newGroups.forEach(group => {
    if (groupFilters[group.name]) {
      const regex = groupFilters[group.name];
      const filteredProxies = allProxyNames.filter(name => regex.test(name));
      // 如果没有匹配到，则添加一个 DIRECT 作为保底，防止代理组为空 Clash 核心报错
      group.proxies = filteredProxies.length > 0 ? filteredProxies : ['DIRECT'];
    }
  });




  // --- 步骤 4: 实现 URL-REGEX 功能 ---
  console.log("正在注入 URL-REGEX 的脚本逻辑...");

  // 1. 设置模式为 'script'
  config.mode = 'script';

  // 2. 定义 findProxyForURL 脚本代码
  // 注意：这里的代码是作为字符串，最终由 Clash 核心来执行的。
const clashScriptCode = `
function findProxyForURL(url, host) {
  const targetApi = 'https://fapi.binance.com/fapi/v1/continuousKlines';
  if url.includes('continuousKlines') {
    console.log('匹配到币安K线API，使用[所有节点]策略组: ' + url);
    return '所有节点';
  }
  return null;
}
`;


  // --- 步骤 3: 定义并前置插入新的规则 ---
  const newRules = [
    // ... (所有规则保持不变)
    'DOMAIN-SUFFIX,google.com,high',
    'DOMAIN-SUFFIX,g.co,high',
    'DOMAIN-SUFFIX,goo.gl,high',
    'DOMAIN-SUFFIX,google.cn,high',
    'DOMAIN-SUFFIX,gstatic.com,high',
    'DOMAIN-SUFFIX,ggpht.com,high',
    'DOMAIN-SUFFIX,googleapis.com,high',
    'DOMAIN-SUFFIX,google-analytics.com,high',
    'DOMAIN-SUFFIX,googleadservices.com,high',
    'DOMAIN-SUFFIX,googlesyndication.com,high',
    'DOMAIN-SUFFIX,googletagmanager.com,high',
    'DOMAIN-SUFFIX,googletagservices.com,high',
    'DOMAIN-SUFFIX,googlevideo.com,high',
    'DOMAIN-SUFFIX,googleusercontent.com,high',
    'DOMAIN-SUFFIX,youtube.com,high',
    'DOMAIN-SUFFIX,youtu.be,high',
    'DOMAIN-SUFFIX,android.com,high',
    'DOMAIN-SUFFIX,doubleclick.net,high',
    'DOMAIN-SUFFIX,recaptcha.net,high',
    'DOMAIN-SUFFIX,augmentcode.com,high',
    'DOMAIN-KEYWORD,requesty,OPENAI',
    'DOMAIN-KEYWORD,openrouter,OPENAI',
    'DOMAIN-KEYWORD,openai,OPENAI',
    'DOMAIN-KEYWORD,perplexity,OPENAI',
    'DOMAIN-KEYWORD,cursor,cursor',
    'DOMAIN,fstream.binance.com,high',
    'DOMAIN-KEYWORD,149.154.175.55:443,low',
    //'DOMAIN,fapi.binance.com,high',
    'DOMAIN-KEYWORD,binance,my',
    'DOMAIN-KEYWORD,tradingview,my',
    'DOMAIN-KEYWORD,bing,low',
    'DOMAIN-KEYWORD,ave,myother',
  ];



  // 3. 将脚本注入到 config 对象中
  config.script = {
    code: clashScriptCode
  };

  console.log("成功注入 findProxyForURL 脚本，模式已切换为 script。");
  
  // --- 步骤 5: 将所有新内容注入到 config 对象中 ---
  config['proxy-groups'].unshift(...newGroups);
  config.rules.unshift(...newRules);
  
  console.log(`成功添加了 ${newGroups.length} 个新的代理组和 ${newRules.length} 条新的规则。`);

  return config;
}