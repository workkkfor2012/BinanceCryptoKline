角色： 你是一名资深的 Rust 性能分析和可观察性专家。
任务： 我正在优化一个程序的日志系统，目标是减少日志量，同时保留关键的逻辑路径信息，以便于判断功能分支是否被完整执行。
上下文：
函数调用频率报告 (frequency_report.txt)： 这是程序单次运行产生的高频函数列表、调用次数和耗时。
相关源码 (db.txt, backfill.txt)： 这是报告中涉及到的核心代码。
你的指令：
请你分析这份报告和源码，并针对前10个高频函数，给出具体的精简建议。你的建议应该是以下两种之一：
A. 完全屏蔽 (Completely Mute): 如果这个函数的日志对于理解核心业务逻辑是纯粹的噪音（例如，循环中的底层辅助函数），建议直接移除它的 #[instrument] 或 tracing::info_span!。
B. 采样记录 (Sampled Logging): 如果这个函数代表一个重要的循环操作（例如，下载任务），但记录每一次都过于冗余，建议采用“首次/末次采样”的策略。请指出应该在哪段代码的循环外层添加一个“概要span”（summary span）。
输出格式：
请为每个函数提供如下格式的分析和建议：
---
**函数:** `function_name`
**分析:** [解释为什么这个函数调用频繁，以及它在业务逻辑中的重要性]
**建议:** [A 或 B]
**实施方案:** [如果 A，说明“移除位于 xxx.rs:yyy 的 instrument”。
如果 B，说明“在 xxx.rs:zzz 的 for 循环外，添加一个名为 'batch_...' 的概要 span，
并对循环内部的 span 进行采样”]