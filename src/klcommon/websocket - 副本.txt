// WebSocket模块 - 提供通用的WebSocket连接管理功能 (使用 fastwebsockets 实现)
use crate::klcommon::{AppError, Result, PROXY_HOST, PROXY_PORT};
use tracing::{info, error, debug, warn, trace, instrument, Instrument};
use std::sync::Arc;
use std::collections::HashMap;
use std::time::{Duration, Instant};
use std::fs::create_dir_all;
use std::path::Path;
use std::sync::atomic::{AtomicUsize, Ordering};
use std::future::Future;
use tokio::sync::Mutex as TokioMutex;
use tokio::sync::mpsc;
use tokio::net::TcpStream;
use tokio::time::sleep;
use tokio_socks::tcp::Socks5Stream;
use serde_json::json;
use serde::Deserialize;

use bytes::Bytes;
use fastwebsockets::{FragmentCollector, Frame, OpCode};
use hyper_util::rt::tokio::TokioIo;
use hyper::upgrade::Upgraded;
use http_body_util::Empty;
use hyper::header::{CONNECTION, UPGRADE};
use hyper::Request;
use tokio_rustls::rustls::{ClientConfig, OwnedTrustAnchor, ServerName};
use tokio_rustls::TlsConnector;


//=============================================================================
// 常量和配置
//=============================================================================

/// 币安WebSocket URL
pub const BINANCE_WS_URL: &str = "wss://fstream.binance.com/ws";

/// WebSocket连接数量
/// 所有品种将平均分配到这些连接中
pub const WEBSOCKET_CONNECTION_COUNT: usize = 1;

/// WebSocket连接重试配置
pub const MAX_RETRY_ATTEMPTS: usize = 5;
pub const INITIAL_RETRY_DELAY_MS: u64 = 1000; // 1秒
pub const MAX_RETRY_DELAY_MS: u64 = 30000; // 30秒

/// 归集交易日志目标
pub const AGG_TRADE_TARGET: &str = "归集交易";

/// WebSocket连接日志目标
pub const WEBSOCKET_CONNECTION_TARGET: &str = "websocket连接";

/// 全市场精简Ticker日志目标
pub const MINI_TICKER_TARGET: &str = "全市场精简Ticker";

//=============================================================================
// WebSocket配置
//=============================================================================

/// WebSocket配置接口
pub trait WebSocketConfig {
    /// 获取代理设置
    fn get_proxy_settings(&self) -> (bool, String, u16);
    /// 获取流列表
    fn get_streams(&self) -> Vec<String>;
}



/// 归集交易配置
#[derive(Clone)]
pub struct AggTradeConfig {
    /// 是否使用代理
    pub use_proxy: bool,
    /// 代理地址
    pub proxy_addr: String,
    /// 代理端口
    pub proxy_port: u16,
    /// 交易对列表
    pub symbols: Vec<String>,
}

impl Default for AggTradeConfig {
    fn default() -> Self {
        Self {
            use_proxy: true,
            proxy_addr: PROXY_HOST.to_string(),
            proxy_port: PROXY_PORT,
            symbols: Vec::new(),
        }
    }
}

impl WebSocketConfig for AggTradeConfig {
    // #[instrument] 移除：简单的配置读取函数，追踪会产生噪音
    fn get_proxy_settings(&self) -> (bool, String, u16) {
        (self.use_proxy, self.proxy_addr.clone(), self.proxy_port)
    }

    // #[instrument] 移除：简单的流名称构建函数，追踪会产生噪音
    fn get_streams(&self) -> Vec<String> {
        self.symbols.iter()
            .map(|symbol| format!("{}@aggTrade", symbol.to_lowercase()))
            .collect()
    }
}

/// 全市场精简Ticker的WebSocket配置
#[derive(Clone)]
pub struct MiniTickerConfig {
    /// 是否使用代理
    pub use_proxy: bool,
    /// 代理地址
    pub proxy_addr: String,
    /// 代理端口
    pub proxy_port: u16,
}

impl Default for MiniTickerConfig {
    fn default() -> Self {
        Self {
            use_proxy: true,
            proxy_addr: PROXY_HOST.to_string(),
            proxy_port: PROXY_PORT,
        }
    }
}

impl WebSocketConfig for MiniTickerConfig {
    fn get_proxy_settings(&self) -> (bool, String, u16) {
        (self.use_proxy, self.proxy_addr.clone(), self.proxy_port)
    }

    fn get_streams(&self) -> Vec<String> {
        // Note: 这个流是固定的，不需要任何参数。
        vec!["!miniTicker@arr".to_string()]
    }
}

/// 创建订阅消息
#[instrument(skip_all)]
pub fn create_subscribe_message(streams: &[String]) -> String {
    json!({
        "method": "SUBSCRIBE",
        "params": streams,
        "id": 1
    })
    .to_string()
}

//=============================================================================
// WebSocket客户端接口
//=============================================================================

/// WebSocket连接状态
#[derive(Debug, Clone)]
pub struct WebSocketConnection {
    pub id: usize,
    pub streams: Vec<String>,
    pub status: String,
    pub message_count: usize,
}

/// WebSocket客户端接口
pub trait WebSocketClient {
    /// 启动WebSocket客户端
    fn start(&mut self) -> impl std::future::Future<Output = Result<()>> + Send;

    /// 获取连接状态
    fn get_connections(&self) -> impl std::future::Future<Output = Vec<WebSocketConnection>> + Send;
}

//=============================================================================
// 数据结构
//=============================================================================

/// 全市场精简Ticker数据
///
/// 从 `!miniTicker@arr` 流接收。
#[derive(serde::Deserialize, Debug, Clone)]
pub struct MiniTickerData {
    #[serde(rename = "e")]
    pub event_type: String,
    #[serde(rename = "E")]
    pub event_time: u64,
    #[serde(rename = "s")]
    pub symbol: String,
    #[serde(rename = "c")]
    pub close_price: String,
    #[serde(rename = "o")]
    pub open_price: String,
    #[serde(rename = "h")]
    pub high_price: String,
    #[serde(rename = "l")]
    pub low_price: String,
    #[serde(rename = "v")]
    pub total_traded_volume: String,
    #[serde(rename = "q")]
    pub total_traded_quote_volume: String,
}

/// 币安原始归集交易数据
#[derive(Debug, Clone)]
pub struct BinanceRawAggTrade {
    pub event_type: String,
    pub event_time: u64,
    pub symbol: String,
    pub aggregate_trade_id: u64,
    pub price: String,
    pub quantity: String,
    pub first_trade_id: u64,
    pub last_trade_id: u64,
    pub trade_time: u64,
    pub is_buyer_maker: bool,
}

/// 归集交易数据 - 从WebSocket接收的原始数据解析后的结构
///
/// 这是系统中AggTradeData的权威定义，包含币安原始数据的所有字段
/// 使用 #[repr(C)] 确保内存布局的可预测性，提高缓存效率
#[repr(C)]
#[derive(Debug, Clone, Deserialize)]
pub struct AggTradeData {
    /// 交易品种
    pub symbol: String,
    /// 成交价格
    pub price: f64,
    /// 成交数量
    pub quantity: f64,
    /// 成交时间戳（毫秒）
    pub timestamp_ms: i64,
    /// 买方是否为做市商
    pub is_buyer_maker: bool,
    /// 归集交易ID
    pub agg_trade_id: i64,
    /// 首个交易ID
    pub first_trade_id: i64,
    /// 最后交易ID
    pub last_trade_id: i64,
    /// 事件时间戳（毫秒）
    pub event_time_ms: i64,
}

impl AggTradeData {
    /// 从币安原始归集交易数据创建
    pub fn from_binance_raw(raw: &BinanceRawAggTrade) -> Self {
        Self {
            symbol: raw.symbol.clone(),
            price: raw.price.parse().unwrap_or(0.0),
            quantity: raw.quantity.parse().unwrap_or(0.0),
            timestamp_ms: raw.trade_time as i64,
            is_buyer_maker: raw.is_buyer_maker,
            agg_trade_id: raw.aggregate_trade_id as i64,
            first_trade_id: raw.first_trade_id as i64,
            last_trade_id: raw.last_trade_id as i64,
            event_time_ms: raw.event_time as i64,
        }
    }
}

//=============================================================================
// 消息处理
//=============================================================================

/// 消息处理接口
pub trait MessageHandler {
    /// 处理WebSocket消息
    fn handle_message(&self, connection_id: usize, message: String) -> impl std::future::Future<Output = Result<()>> + Send;
}

/// 公开的WebSocket命令，用于动态控制
#[derive(Debug, Clone)]
pub enum WsCommand {
    Subscribe(Vec<String>),
    // 未来可以扩展 Unsubscribe 等
}

/// 用于封装不同类型通道发送端的枚举，提供了统一的发送接口。
enum TradeSender {
    Unbounded(tokio::sync::mpsc::UnboundedSender<AggTradeData>),
    Bounded(tokio::sync::mpsc::Sender<AggTradeData>),
}

impl TradeSender {
    /// 统一的异步发送方法，能正确处理不同通道的背压。
    async fn send(&self, data: AggTradeData) -> std::result::Result<(), String> {
        match self {
            TradeSender::Unbounded(s) => s.send(data).map_err(|e| format!("Unbounded send error: {}", e)),
            // [关键修改] 使用 .await 来异步发送，正确处理背压
            TradeSender::Bounded(s) => s.send(data).await.map_err(|e| format!("Bounded send error: {}", e)),
        }
    }
}

/// 归集交易消息处理器，用于K线聚合系统
pub struct AggTradeMessageHandler {
    pub message_count: Arc<std::sync::atomic::AtomicUsize>,
    pub error_count: Arc<std::sync::atomic::AtomicUsize>,
    // [修改] 使用一个枚举来统一表示不同类型的发送者，使结构更清晰
    sender: Option<TradeSender>,
}

impl AggTradeMessageHandler {
    #[instrument(skip_all)]
    pub fn new(
        message_count: Arc<std::sync::atomic::AtomicUsize>,
        error_count: Arc<std::sync::atomic::AtomicUsize>,
    ) -> Self {
        Self {
            message_count,
            error_count,
            sender: None,
        }
    }

    /// 创建带有无界交易数据发送器的消息处理器
    #[instrument(skip_all)]
    pub fn with_unbounded_sender(
        message_count: Arc<std::sync::atomic::AtomicUsize>,
        error_count: Arc<std::sync::atomic::AtomicUsize>,
        trade_sender: tokio::sync::mpsc::UnboundedSender<AggTradeData>,
    ) -> Self {
        Self {
            message_count,
            error_count,
            sender: Some(TradeSender::Unbounded(trade_sender)),
        }
    }

    /// 创建带有有界交易数据发送器的消息处理器
    #[instrument(skip_all)]
    pub fn with_bounded_sender(
        message_count: Arc<std::sync::atomic::AtomicUsize>,
        error_count: Arc<std::sync::atomic::AtomicUsize>,
        bounded_trade_sender: tokio::sync::mpsc::Sender<AggTradeData>,
    ) -> Self {
        Self {
            message_count,
            error_count,
            sender: Some(TradeSender::Bounded(bounded_trade_sender)),
        }
    }
}

/// 全市场精简Ticker消息处理器
pub struct MiniTickerMessageHandler {
    /// 用于将解析后的数据向外发送的通道
    pub data_sender: tokio::sync::mpsc::UnboundedSender<Vec<MiniTickerData>>,
}

impl MiniTickerMessageHandler {
    /// 创建一个新的 MiniTickerMessageHandler
    pub fn new(data_sender: tokio::sync::mpsc::UnboundedSender<Vec<MiniTickerData>>) -> Self {
        Self { data_sender }
    }
}

impl MessageHandler for MiniTickerMessageHandler {
    fn handle_message(&self, connection_id: usize, message: String) -> impl std::future::Future<Output = Result<()>> + Send {
        async move {
            // MiniTicker 流直接是一个JSON数组
            match serde_json::from_str::<Vec<MiniTickerData>>(&message) {
                Ok(tickers) => {
                    debug!(target: MINI_TICKER_TARGET, "连接 {} 收到 {} 条 MiniTicker 更新", connection_id, tickers.len());
                    // 将解析后的数据发送出去
                    if let Err(e) = self.data_sender.send(tickers) {
                        error!(target: MINI_TICKER_TARGET, "发送 MiniTicker 数据失败: {}", e);
                    }
                }
                Err(e) => {
                    // 检查是否是订阅成功等非数据消息
                    if !message.contains("result") {
                         warn!(target: MINI_TICKER_TARGET, "连接 {} 解析 MiniTicker 消息失败: {}, 原始消息: {}", connection_id, e, message);
                    }
                }
            }
            Ok(())
        }
    }
}

impl MessageHandler for AggTradeMessageHandler {
    fn handle_message(&self, connection_id: usize, message: String) -> impl std::future::Future<Output = Result<()>> + Send {
        async move {
            // 增加消息计数
            self.message_count.fetch_add(1, std::sync::atomic::Ordering::Relaxed);

            // [新增日志] L1 - handle_message 开始处理
            trace!(target: AGG_TRADE_TARGET, connection_id, "L1 - handle_message 开始处理");

            // 解析归集交易消息
            match self.parse_agg_trade_message(&message).await {
                Ok(Some(agg_trade)) => {
                    // [新增日志] L2 - 路径A: parse成功, 是aggTrade
                    trace!(target: AGG_TRADE_TARGET, connection_id, "L2 - 路径A: parse成功, 是aggTrade");

                    info!(target: AGG_TRADE_TARGET, "连接 {} 收到归集交易: {} {} @ {}",
                        connection_id, agg_trade.symbol, agg_trade.quantity, agg_trade.price);

                    // 将归集交易数据发送给TradeEventRouter
                    let trade_data = AggTradeData::from_binance_raw(&agg_trade);

                    // [修改] 使用统一的异步发送逻辑
                    if let Some(ref sender) = self.sender {
                        if let Err(e) = sender.send(trade_data).await { // 注意这里的 .await
                            error!(target: AGG_TRADE_TARGET, "发送归集交易数据失败: {}", e);
                            self.error_count.fetch_add(1, std::sync::atomic::Ordering::Relaxed);
                        }
                    } else {
                         warn!(target: AGG_TRADE_TARGET, "没有配置交易数据发送器，跳过数据路由");
                    }

                    Ok(())
                }
                Ok(None) => {
                    // [新增日志] L2 - 路径B: parse成功, 但不是aggTrade
                    trace!(target: AGG_TRADE_TARGET, connection_id, "L2 - 路径B: parse成功, 但不是aggTrade");

                    // 非归集交易消息，可能是订阅确认等
                    if let Ok(json) = serde_json::from_str::<serde_json::Value>(&message) {
                        // 统一处理所有包含 "id" 的响应消息，无论成功或失败
                        if json.get("id").is_some() {
                            // [新增日志] L3 - 路径B.1: 是一个带ID的响应消息
                            trace!(target: AGG_TRADE_TARGET, connection_id, "L3 - 路径B.1: 是一个带ID的响应消息");
                            if let Some(error) = json.get("error") {
                                // 明确地捕获并记录错误响应
                                tracing::error!(
                                    target: AGG_TRADE_TARGET,
                                    log_type = "subscription_error",
                                    connection_id = connection_id,
                                    error_details = %error,
                                    raw_message = %message,
                                    "❌ WebSocket订阅失败或发生错误！"
                                );
                            } else if let Some(result) = json.get("result") {
                                // 捕获成功的响应
                                tracing::info!(
                                    target: AGG_TRADE_TARGET,
                                    log_type = "low_freq",
                                    connection_id = connection_id,
                                    message_type = "订阅响应",
                                    result = %result,
                                    raw_message = %message,
                                    "✅ WebSocket收到订阅响应"
                                );

                                // [新增] 额外的简化日志，确保订阅确认可见
                                info!(target: AGG_TRADE_TARGET, "🎯 连接 {} 订阅确认: result={}", connection_id, result);
                            } else {
                                // 其他包含 "id" 但格式未知的响应
                                tracing::warn!(
                                    target: AGG_TRADE_TARGET,
                                    log_type = "low_freq",
                                    connection_id = connection_id,
                                    message_type = "未知ID响应",
                                    raw_message = %message,
                                    "收到一个未知的带ID的响应消息"
                                );
                            }
                        } else if let Some(event_type) = json.get("e").and_then(|e| e.as_str()) {
                            // [新增日志] L3 - 路径B.2: 是其他类型的事件
                            trace!(target: AGG_TRADE_TARGET, connection_id, "L3 - 路径B.2: 是其他类型的事件");

                            // 保留对其他类型事件的日志记录
                            tracing::info!(
                                target: AGG_TRADE_TARGET,
                                log_type = "low_freq",
                                connection_id = connection_id,
                                event_type = %event_type,
                                "连接收到非订阅响应的事件消息"
                            );
                        } else {
                            // [新增日志] L3 - 路径B.3: 是未知格式的JSON
                            trace!(target: AGG_TRADE_TARGET, connection_id, "L3 - 路径B.3: 是未知格式的JSON");

                            // 其他未知JSON消息
                            tracing::info!(
                                target: AGG_TRADE_TARGET,
                                log_type = "low_freq",
                                connection_id = connection_id,
                                message_type = "未知JSON消息",
                                raw_message = %message,
                                "连接收到未知格式的JSON消息"
                            );
                        }
                    } else {
                        // [新增日志] L3 - 路径B.4: 非JSON消息
                        trace!(target: AGG_TRADE_TARGET, connection_id, "L3 - 路径B.4: 非JSON消息");

                        tracing::info!(
                            target: AGG_TRADE_TARGET,
                            log_type = "low_freq",
                            connection_id = connection_id,
                            message_type = "非JSON消息",
                            raw_message = if message.len() > 200 {
                                format!("{}...(长度:{})", &message[..200], message.len())
                            } else {
                                message.clone()
                            },
                            "连接收到非JSON消息"
                        );
                    };
                    Ok(())
                }
                Err(e) => {
                    // [新增日志] L2 - 路径C: parse失败
                    trace!(target: AGG_TRADE_TARGET, connection_id, "L2 - 路径C: parse失败");

                    self.error_count.fetch_add(1, std::sync::atomic::Ordering::Relaxed);
                    error!(target: AGG_TRADE_TARGET, "连接 {} 解析归集交易消息失败: {}, 原始消息: {}",
                        connection_id, e,
                        if message.len() > 100 {
                            format!("{}...", &message[..100])
                        } else {
                            message
                        });
                    Err(e)
                }
            }
        }
    }
}

impl AggTradeMessageHandler {
    /// 解析归集交易消息
    #[instrument(skip_all, err)]
    async fn parse_agg_trade_message(&self, message: &str) -> Result<Option<BinanceRawAggTrade>> {
        // [新增日志] parse - 开始解析JSON对象
        trace!(target: AGG_TRADE_TARGET, "parse - 开始解析JSON对象");

        // 解析JSON
        let json: serde_json::Value = serde_json::from_str(message)
            .map_err(|e| AppError::ParseError(format!("JSON解析失败: {}", e)))?;

        // 首先检查是否是包装在stream中的消息格式
        let data_json = if let Some(data) = json.get("data") {
            // [新增日志] parse - 检测到stream包裹层, 提取data部分
            trace!(target: AGG_TRADE_TARGET, "parse - 检测到stream包裹层, 提取data部分");
            data
        } else {
            // [新增日志] parse - 未检测到stream包裹层, 直接使用原始JSON
            trace!(target: AGG_TRADE_TARGET, "parse - 未检测到stream包裹层, 直接使用原始JSON");
            &json
        };

        // [新增] 详细的JSON结构分析
        trace!(target: AGG_TRADE_TARGET, "parse - JSON结构分析: 顶级字段 = {:?}",
            json.as_object().map(|obj| obj.keys().collect::<Vec<_>>()));
        trace!(target: AGG_TRADE_TARGET, "parse - data_json结构分析: 字段 = {:?}",
            data_json.as_object().map(|obj| obj.keys().collect::<Vec<_>>()));

        // 检查是否是归集交易消息
        if let Some(event_type) = data_json.get("e").and_then(|e| e.as_str()) {
            // [新增] 详细的事件类型日志
            trace!(target: AGG_TRADE_TARGET, "parse - 发现事件类型字段: '{}'", event_type);

            if event_type == "aggTrade" {
                // [新增日志] parse - 事件类型匹配aggTrade, 开始反序列化
                trace!(target: AGG_TRADE_TARGET, "parse - 事件类型匹配aggTrade, 开始反序列化");

                // [新增] 简化版本，确保在info级别可见
                info!(target: AGG_TRADE_TARGET, "🎯 发现aggTrade事件，开始解析交易数据");

                // 解析归集交易数据
                let agg_trade = BinanceRawAggTrade {
                    event_type: event_type.to_string(),
                    event_time: data_json.get("E").and_then(|e| e.as_u64()).unwrap_or(0),
                    symbol: data_json.get("s").and_then(|s| s.as_str()).unwrap_or("").to_string(),
                    aggregate_trade_id: data_json.get("a").and_then(|a| a.as_u64()).unwrap_or(0),
                    price: data_json.get("p").and_then(|p| p.as_str()).unwrap_or("0").to_string(),
                    quantity: data_json.get("q").and_then(|q| q.as_str()).unwrap_or("0").to_string(),
                    first_trade_id: data_json.get("f").and_then(|f| f.as_u64()).unwrap_or(0),
                    last_trade_id: data_json.get("l").and_then(|l| l.as_u64()).unwrap_or(0),
                    trade_time: data_json.get("T").and_then(|t| t.as_u64()).unwrap_or(0),
                    is_buyer_maker: data_json.get("m").and_then(|m| m.as_bool()).unwrap_or(false),
                };

                debug!(target: AGG_TRADE_TARGET, "归集交易解析成功: {} {} @ {}",
                    agg_trade.symbol, agg_trade.quantity, agg_trade.price);

                // 发出验证事件
                tracing::info!(
                    target: AGG_TRADE_TARGET,
                    event_name = "trade_data_parsed",
                    symbol = %agg_trade.symbol,
                    price = agg_trade.price.parse::<f64>().unwrap_or(0.0),
                    quantity = agg_trade.quantity.parse::<f64>().unwrap_or(0.0),
                    timestamp_ms = agg_trade.trade_time as i64,
                    "交易数据解析完成"
                );

                return Ok(Some(agg_trade));
            } else {
                // [新增日志] parse - 事件类型不匹配aggTrade
                trace!(target: AGG_TRADE_TARGET, "parse - 事件类型不匹配aggTrade: {}", event_type);
            }
        } else {
            // [新增日志] parse - 消息中没有找到事件类型'e'字段
            trace!(target: AGG_TRADE_TARGET, "parse - 消息中没有找到事件类型'e'字段");
        }

        // [新增日志] parse - 最终判定不是aggTrade消息
        trace!(target: AGG_TRADE_TARGET, "parse - 最终判定不是aggTrade消息");
        Ok(None)
    }
}

/// 处理WebSocket消息
#[instrument(skip_all)]
pub async fn process_messages<H: MessageHandler>(
    mut rx: mpsc::Receiver<(usize, String)>,
    handler: Arc<H>,
    connections: Arc<TokioMutex<HashMap<usize, WebSocketConnection>>>,
) {
    info!(target: WEBSOCKET_CONNECTION_TARGET,   log_type = "low_freq", "🚀 启动WebSocket消息处理器");

    // 统计信息
    let mut _message_count = 0;
    let mut last_stats_time = Instant::now();
    let stats_interval = Duration::from_secs(30);

    // 处理消息
    while let Some((connection_id, text)) = rx.recv().await {
        _message_count += 1;

        // 每30秒输出一次统计信息
        let now = Instant::now();
        if now.duration_since(last_stats_time) >= stats_interval {
            //info!("WebSocket统计: 已处理 {} 条消息", message_count);

            // 输出每个连接的统计信息
            let connections_guard = connections.lock().await;
            for (_id, _conn) in connections_guard.iter() {
               //info!("连接 {}: {} 条消息, 状态: {}", id, conn.message_count, conn.status);
            }

            last_stats_time = now;
        }

        // 处理消息
        if let Err(e) = handler.handle_message(connection_id, text).await {
            error!(target: WEBSOCKET_CONNECTION_TARGET, "处理消息失败: {}", e);
        }
    }

    info!( target: WEBSOCKET_CONNECTION_TARGET,   log_type = "low_freq", "✅ WebSocket消息处理器已停止");
}

//=============================================================================
// 实现 hyper 的 Executor trait
//=============================================================================

/// 实现 hyper 的 Executor trait，用于 fastwebsockets 握手
struct SpawnExecutor;

impl<Fut> hyper::rt::Executor<Fut> for SpawnExecutor
where
    Fut: Future + Send + 'static,
    Fut::Output: Send + 'static,
{
    fn execute(&self, fut: Fut) {
        tokio::task::spawn(fut);
    }
}

//=============================================================================
// 连接管理
//=============================================================================

/// WebSocket连接管理器
#[derive(Clone)]
pub struct ConnectionManager {
    /// 是否使用代理
    use_proxy: bool,
    /// 代理地址
    proxy_addr: String,
    /// 代理端口
    proxy_port: u16,
}

impl ConnectionManager {
    /// 创建新的连接管理器
    // #[instrument] 移除：简单的构造函数，追踪会产生噪音
    pub fn new(use_proxy: bool, proxy_addr: String, proxy_port: u16) -> Self {
        Self {
            use_proxy,
            proxy_addr,
            proxy_port,
        }
    }

    /// 连接到WebSocket服务器（带重试机制）
    #[instrument(skip_all, err)]
    pub async fn connect(&self) -> Result<FragmentCollector<TokioIo<Upgraded>>> {
        let mut last_error = None;
        const CONNECT_TIMEOUT: Duration = Duration::from_secs(15); // 新增：为每次尝试设置15秒超时

        for attempt in 1..=MAX_RETRY_ATTEMPTS {
            info!(
                target: WEBSOCKET_CONNECTION_TARGET,
                log_type = "low_freq",
                "🔄 WebSocket连接尝试 {}/{}",
                attempt,
                MAX_RETRY_ATTEMPTS
            );

            // [修改逻辑] 使用 tokio::time::timeout 为单次连接尝试增加超时
            match tokio::time::timeout(CONNECT_TIMEOUT, self.connect_once()).await {
                Ok(Ok(ws)) => { // 超时内成功连接
                    if attempt > 1 {
                        info!(
                            target: WEBSOCKET_CONNECTION_TARGET,
                            log_type = "low_freq",
                            "✅ WebSocket连接在第{}次尝试后成功建立",
                            attempt
                        );
                    }
                    return Ok(ws);
                }
                Ok(Err(e)) => { // 超时内连接失败
                    last_error = Some(e);
                }
                Err(_) => { // 连接超时
                    last_error = Some(AppError::WebSocketError(format!("连接尝试超过 {} 秒未响应，已超时", CONNECT_TIMEOUT.as_secs())));
                }
            }

            if attempt < MAX_RETRY_ATTEMPTS {
                let delay_ms = std::cmp::min(
                    INITIAL_RETRY_DELAY_MS * (2_u64.pow((attempt - 1) as u32)),
                    MAX_RETRY_DELAY_MS
                );

                // [修改逻辑] 将 warn! 提升为 error! 以确保日志可见性
                error!(
                    target: WEBSOCKET_CONNECTION_TARGET,
                    log_type = "low_freq",
                    error_chain = format!("{:#}", last_error.as_ref().unwrap()),
                    "❌ WebSocket连接第{}次尝试失败，{}ms后重试",
                    attempt,
                    delay_ms
                );

                sleep(Duration::from_millis(delay_ms)).await;
            } else {
                error!(
                    target: WEBSOCKET_CONNECTION_TARGET,
                    log_type = "low_freq",
                    error_chain = format!("{:#}", last_error.as_ref().unwrap()),
                    "💥 WebSocket连接在{}次尝试后全部失败",
                    MAX_RETRY_ATTEMPTS
                );
            }
        }

        // 返回最后一次的错误
        Err(last_error.unwrap())
    }

    /// 单次连接尝试（内部方法）
    #[instrument(skip_all, err)]
    async fn connect_once(&self) -> Result<FragmentCollector<TokioIo<Upgraded>>> {
        // 设置主机和端口
        let host = "fstream.binance.com";
        let port = 443;
        let addr = format!("{}:{}", host, port);

        // [修改逻辑] 统一使用 /ws 端点，以支持动态订阅和统一的连接行为。
        // 不再根据流的数量来决定是使用 /stream还是 /ws。
        let path = "/ws".to_string();

        // [修改逻辑] 完整URL的日志现在反映了统一的端点
        let full_url = format!("wss://{}:{}{}", host, port, path);
        info!(
            target: WEBSOCKET_CONNECTION_TARGET,
            log_type = "low_freq",
            "🔗 WebSocket连接详情 - 统一端点URL: {}",
            full_url
        );
        info!(
            target: WEBSOCKET_CONNECTION_TARGET,
            log_type = "low_freq",
            "🌐 代理设置: 启用={}, 地址={}:{}",
            self.use_proxy,
            self.proxy_addr,
            self.proxy_port
        );

        // 建立TCP连接（通过代理或直接）
        let tcp_stream = if self.use_proxy {
            debug!(target: WEBSOCKET_CONNECTION_TARGET, log_type = "module", "🌐 通过代理 {}:{} 连接", self.proxy_addr, self.proxy_port);

            // 连接到代理
            let socks_stream = Socks5Stream::connect(
                (self.proxy_addr.as_str(), self.proxy_port),
                (host, port)
            )
            .await
            .map_err(|e| AppError::WebSocketError(format!("代理连接失败: {}", e)))?;

            // 获取TCP流
            socks_stream.into_inner()
        } else {
            // 直接连接
            TcpStream::connect(addr).await?
        };

        debug!(target: WEBSOCKET_CONNECTION_TARGET, log_type = "module", "✅ TCP连接已建立");

        // 创建 TLS 连接
        let mut root_store = tokio_rustls::rustls::RootCertStore::empty();
        root_store.add_trust_anchors(webpki_roots::TLS_SERVER_ROOTS.0.iter().map(
            |ta| {
                OwnedTrustAnchor::from_subject_spki_name_constraints(
                    ta.subject,
                    ta.spki,
                    ta.name_constraints,
                )
            },
        ));

        let config = ClientConfig::builder()
            .with_safe_defaults()
            .with_root_certificates(root_store)
            .with_no_client_auth();

        let connector = TlsConnector::from(Arc::new(config));
        let server_name = ServerName::try_from(host)
            .map_err(|_| AppError::WebSocketError("无效的域名".to_string()))?;

        debug!(target: WEBSOCKET_CONNECTION_TARGET, log_type = "module", "🔐 建立TLS连接...");
        let tls_stream = connector.connect(server_name, tcp_stream).await?;
        debug!(target: WEBSOCKET_CONNECTION_TARGET, log_type = "module", "✅ TLS连接已建立");

        // 创建 HTTP 请求
        let req = Request::builder()
            .method("GET")
            .uri(format!("https://{}{}", host, path))
            .header("Host", host)
            .header(UPGRADE, "websocket")
            .header(CONNECTION, "upgrade")
            .header(
                "Sec-WebSocket-Key",
                fastwebsockets::handshake::generate_key(),
            )
            .header("Sec-WebSocket-Version", "13")
            .body(Empty::<Bytes>::new())
            .map_err(|e| AppError::WebSocketError(format!("创建HTTP请求失败: {}", e)))?;

        debug!(target: WEBSOCKET_CONNECTION_TARGET, "执行WebSocket握手...");

        // 执行 WebSocket 握手
        let (ws, _) = fastwebsockets::handshake::client(&SpawnExecutor, req, tls_stream).await
            .map_err(|e| AppError::WebSocketError(format!("WebSocket握手失败: {}", e)))?;
        let ws_collector = FragmentCollector::new(ws);

        debug!(target: WEBSOCKET_CONNECTION_TARGET, "WebSocket握手成功");

        // [修改逻辑] 移除这里的订阅逻辑。此函数现在只负责连接。
        // 调用者（如 run_io_loop）将负责在连接成功后发送订阅消息。

        Ok(ws_collector)
    }

    /// 处理WebSocket消息
    #[instrument(skip_all)]
    pub async fn handle_messages(
        &self,
        connection_id: usize,
        ws: &mut FragmentCollector<TokioIo<Upgraded>>,
        tx: mpsc::Sender<(usize, String)>,
        connections: Arc<TokioMutex<HashMap<usize, WebSocketConnection>>>,
    ) {
        info!(target: WEBSOCKET_CONNECTION_TARGET, "开始处理连接 {} 的消息", connection_id);

        // 处理消息，添加超时处理
        loop {
            // 使用 tokio::time::timeout 添加超时处理
            match tokio::time::timeout(Duration::from_secs(30), ws.read_frame()).await {
                Ok(result) => {
                    match result {
                        Ok(frame) => {
                            match frame.opcode {
                                OpCode::Text => {
                                    // 将二进制数据转换为字符串
                                    let text = String::from_utf8(frame.payload.to_vec())
                                        .unwrap_or_else(|_| "无效的UTF-8数据".to_string());

                                    // 更新消息计数
                                    {
                                        let mut connections = connections.lock().await;
                                        if let Some(conn) = connections.get_mut(&connection_id) {
                                            conn.message_count += 1;
                                        }
                                    }

                                    // 发送消息到处理器
                                    if let Err(e) = tx.send((connection_id, text)).await {
                                        error!(target: WEBSOCKET_CONNECTION_TARGET, "发送消息到处理器失败: {}", e);
                                        break;
                                    }
                                },
                                OpCode::Binary => {
                                    debug!(target: WEBSOCKET_CONNECTION_TARGET, "收到二进制消息，长度: {}", frame.payload.len());
                                },
                                OpCode::Ping => {
                                    debug!(target: WEBSOCKET_CONNECTION_TARGET, "收到Ping，发送Pong");
                                    if let Err(e) = ws.write_frame(Frame::new(true, OpCode::Pong, None, frame.payload)).await {
                                        error!(target: WEBSOCKET_CONNECTION_TARGET, "发送Pong失败: {}", e);
                                        break;
                                    }
                                },
                                OpCode::Pong => {
                                    debug!(target: WEBSOCKET_CONNECTION_TARGET, "收到Pong");
                                },
                                OpCode::Close => {
                                    info!(target: WEBSOCKET_CONNECTION_TARGET, "收到关闭消息，连接将关闭");
                                    break;
                                },
                                _ => {
                                    debug!(target: WEBSOCKET_CONNECTION_TARGET, "收到其他类型的消息");
                                }
                            }
                        },
                        Err(e) => {
                            error!(target: WEBSOCKET_CONNECTION_TARGET, "WebSocket错误: {}", e);
                            break;
                        }
                    }
                },
                Err(_) => {
                    // 超时，发送ping以保持连接
                    debug!(target: WEBSOCKET_CONNECTION_TARGET, "WebSocket连接超时，发送Ping");
                    if let Err(e) = ws.write_frame(Frame::new(true, OpCode::Ping, None, vec![].into())).await {
                        error!(target: WEBSOCKET_CONNECTION_TARGET, "发送Ping失败: {}", e);
                        break;
                    }
                }
            }
        }

        // 更新连接状态
        {
            let mut connections = connections.lock().await;
            if let Some(conn) = connections.get_mut(&connection_id) {
                conn.status = "已断开".to_string();
            }
        }

        info!(target: WEBSOCKET_CONNECTION_TARGET, "连接 {} 已关闭", connection_id);
    }
}













//=============================================================================
// 归集交易客户端
//=============================================================================

/// 归集交易客户端
pub struct AggTradeClient {
    config: AggTradeConfig,
    connection_id_counter: AtomicUsize,
    connections: Arc<TokioMutex<HashMap<usize, WebSocketConnection>>>,
    /// 外部注入的消息处理器（可选）
    external_handler: Option<Arc<AggTradeMessageHandler>>,
    /// 用于从外部接收命令的发送端
    command_tx: Option<mpsc::Sender<WsCommand>>,
}

impl AggTradeClient {
    /// 创建新的归集交易客户端
    #[instrument(skip_all)]
    pub fn new(config: AggTradeConfig) -> Self {
        Self {
            config,
            connection_id_counter: AtomicUsize::new(1),
            connections: Arc::new(TokioMutex::new(HashMap::new())),
            external_handler: None,
            command_tx: None,
        }
    }

    /// 创建带有外部消息处理器的归集交易客户端
    #[instrument(skip_all)]
    pub fn new_with_handler(
        config: AggTradeConfig,
        handler: Arc<AggTradeMessageHandler>
    ) -> Self {
        let (command_tx, _command_rx) = mpsc::channel(16); // rx 会在 start() 时被 take
        Self {
            config,
            connection_id_counter: AtomicUsize::new(1),
            connections: Arc::new(TokioMutex::new(HashMap::new())),
            external_handler: Some(handler),
            command_tx: Some(command_tx),
        }
    }

    /// 允许外部获取命令发送端
    pub fn get_command_sender(&self) -> Option<mpsc::Sender<WsCommand>> {
        self.command_tx.clone()
    }
}

impl WebSocketClient for AggTradeClient {
    /// 启动客户端
    fn start(&mut self) -> impl std::future::Future<Output = Result<()>> + Send {
        async move {
            info!(target: AGG_TRADE_TARGET, "启动归集交易客户端 (支持动态订阅)");
            info!(target: AGG_TRADE_TARGET, "使用代理: {}", self.config.use_proxy);

            if self.config.use_proxy {
                info!(target: AGG_TRADE_TARGET, "代理地址: {}:{}", self.config.proxy_addr, self.config.proxy_port);
            }

            // 确保日志目录存在
            let log_dir = Path::new("logs");
            if !log_dir.exists() {
                create_dir_all(log_dir)?;
            }

            // take 出 command_rx 以便传递给连接任务
            let mut command_rx = if let Some(_tx) = &self.command_tx {
                let (new_tx, rx) = mpsc::channel(16);
                // 替换原有的 tx，保留新的 rx
                self.command_tx = Some(new_tx);
                rx
            } else {
                // 如果没有命令通道，创建一个永远不会收到消息的通道
                let (_tx, rx) = mpsc::channel(1);
                rx
            };

            // 创建连接管理器
            let (use_proxy, proxy_addr, proxy_port) = self.config.get_proxy_settings();
            let connection_manager = ConnectionManager::new(
                use_proxy,
                proxy_addr,
                proxy_port,
            );

            // 获取初始流
            let initial_streams = self.config.get_streams();
            info!(target: AGG_TRADE_TARGET, "初始订阅 {} 个流: {:?}", initial_streams.len(), initial_streams);

            // 获取消息处理器
            let handler = if let Some(external_handler) = &self.external_handler {
                external_handler.clone()
            } else {
                Arc::new(AggTradeMessageHandler::new(
                    Arc::new(AtomicUsize::new(0)),
                    Arc::new(AtomicUsize::new(0)),
                ))
            };

            // 使用单连接模式，支持动态订阅
            let connection_id = self.connection_id_counter.fetch_add(1, Ordering::SeqCst);
            let connections_clone = self.connections.clone();

            // 更新连接状态
            {
                let mut connections = connections_clone.lock().await;
                connections.insert(connection_id, WebSocketConnection {
                    id: connection_id,
                    streams: initial_streams.clone(),
                    status: "初始化".to_string(),
                    message_count: 0,
                });
            }

            // 启动单个连接任务，支持动态订阅
            let connection_task = tokio::spawn(async move {
                let mut current_streams = initial_streams;

                'reconnect_loop: loop {
                    // 更新状态为连接中
                    {
                        let mut connections = connections_clone.lock().await;
                        if let Some(conn) = connections.get_mut(&connection_id) {
                            conn.status = "连接中".to_string();
                        }
                    }

                    // 建立连接
                    match connection_manager.connect().await {
                        Ok(mut ws) => {
                            // 更新状态为已连接
                            {
                                let mut connections = connections_clone.lock().await;
                                if let Some(conn) = connections.get_mut(&connection_id) {
                                    conn.status = "已连接".to_string();
                                    conn.streams = current_streams.clone();
                                }
                            }

                            info!(target: AGG_TRADE_TARGET, "连接 {} 已建立", connection_id);

                            // [新增] 打印完整的连接信息
                            info!(
                                target: AGG_TRADE_TARGET,
                                log_type = "low_freq",
                                connection_id = connection_id,
                                "🔗 AggTradeClient 完整连接信息 - URL: wss://fstream.binance.com:443/ws"
                            );

                            // 发送初始订阅
                            if !current_streams.is_empty() {
                                let sub_msg = create_subscribe_message(&current_streams);

                                // [新增] 打印完整的订阅消息内容
                                info!(
                                    target: AGG_TRADE_TARGET,
                                    log_type = "low_freq",
                                    connection_id = connection_id,
                                    stream_count = current_streams.len(),
                                    streams = ?current_streams,
                                    subscription_message = %sub_msg,
                                    "📤 AggTradeClient 发送初始订阅消息"
                                );

                                // [新增] 额外的简化日志，确保订阅内容可见
                                info!(target: AGG_TRADE_TARGET, "📋 订阅详情: {} 个品种", current_streams.len());
                                info!(target: AGG_TRADE_TARGET, "📋 订阅消息: {}", sub_msg);
                                if current_streams.len() <= 10 {
                                    info!(target: AGG_TRADE_TARGET, "📋 品种列表: {:?}", current_streams);
                                } else {
                                    info!(target: AGG_TRADE_TARGET, "📋 前10个品种: {:?}", &current_streams[..10]);
                                    info!(target: AGG_TRADE_TARGET, "📋 后10个品种: {:?}", &current_streams[current_streams.len()-10..]);
                                }

                                let frame = Frame::text(sub_msg.into_bytes().into());
                                if let Err(e) = ws.write_frame(frame).await {
                                    error!(target: AGG_TRADE_TARGET, "发送初始订阅失败: {}", e);
                                    sleep(Duration::from_secs(5)).await;
                                    continue 'reconnect_loop;
                                }
                                info!(target: AGG_TRADE_TARGET, "已发送初始订阅: {} 个流", current_streams.len());
                            }

                            // [新增] 添加定期状态检查
                            let mut status_interval = tokio::time::interval(Duration::from_secs(30));
                            let mut last_message_time = std::time::Instant::now();

                            // 核心消息循环，支持动态订阅
                            'message_loop: loop {
                                tokio::select! {
                                    // [新增] 分支0：定期状态检查
                                    _ = status_interval.tick() => {
                                        let elapsed = last_message_time.elapsed();
                                        let conn_count = {
                                            let connections = connections_clone.lock().await;
                                            if let Some(conn) = connections.get(&connection_id) {
                                                conn.message_count
                                            } else {
                                                0
                                            }
                                        };
                                        info!(
                                            target: WEBSOCKET_CONNECTION_TARGET,
                                            "💓 连接 {} 状态检查 - 消息总数: {}, 距离上次消息: {:?}",
                                            connection_id, conn_count, elapsed
                                        );

                                        // 如果超过2分钟没有收到消息，可能有问题
                                        if elapsed > Duration::from_secs(120) {
                                            warn!(target: WEBSOCKET_CONNECTION_TARGET,
                                                "⚠️ 连接 {} 超过2分钟未收到消息，可能连接异常", connection_id);
                                        }
                                    },
                                    // 分支1：处理WebSocket消息
                                    result = ws.read_frame() => {
                                        // [新增日志] 帧读取结果诊断
                                        trace!(target: WEBSOCKET_CONNECTION_TARGET, connection_id, "🔍 WebSocket read_frame 调用完成");

                                        match result {
                                            Ok(frame) => {
                                                // [新增日志] 帧类型诊断
                                                trace!(target: WEBSOCKET_CONNECTION_TARGET, connection_id, opcode = ?frame.opcode, payload_len = frame.payload.len(), "📦 收到WebSocket帧");

                                                match frame.opcode {
                                                    OpCode::Text => {
                                                        let text = String::from_utf8_lossy(&frame.payload).to_string();

                                                        // [新增日志] L0 - 捕获最原始的WebSocket文本帧
                                                        trace!(
                                                            target: WEBSOCKET_CONNECTION_TARGET,
                                                            connection_id,
                                                            raw_message = %text,
                                                            "L0 - 收到原始WebSocket文本帧"
                                                        );

                                                        // [新增日志] 简化版本，确保在info级别可见
                                                        info!(target: WEBSOCKET_CONNECTION_TARGET, "📨 连接 {} 收到消息 (长度: {}): {}",
                                                            connection_id,
                                                            text.len(),
                                                            if text.len() > 200 { format!("{}...", &text[..200]) } else { text.clone() }
                                                        );

                                                        // [新增] 更新最后消息时间
                                                        last_message_time = std::time::Instant::now();

                                                        // 更新消息计数
                                                        {
                                                            let mut connections = connections_clone.lock().await;
                                                            if let Some(conn) = connections.get_mut(&connection_id) {
                                                                conn.message_count += 1;
                                                                // [新增日志] 消息计数更新
                                                                if conn.message_count % 10 == 1 || conn.message_count <= 5 {
                                                                    info!(target: WEBSOCKET_CONNECTION_TARGET, "📊 连接 {} 消息计数: {}", connection_id, conn.message_count);
                                                                }
                                                            }
                                                        }

                                                        // [新增日志] 消息处理前
                                                        trace!(target: AGG_TRADE_TARGET, connection_id, "🔄 准备调用 handle_message");

                                                        // 处理消息
                                                        if let Err(e) = handler.handle_message(connection_id, text).await {
                                                            warn!(target: AGG_TRADE_TARGET, "消息处理失败: {}", e);
                                                        } else {
                                                            // [新增日志] 消息处理成功
                                                            trace!(target: AGG_TRADE_TARGET, connection_id, "✅ handle_message 处理完成");
                                                        }
                                                    },
                                                    OpCode::Close => {
                                                        info!(target: AGG_TRADE_TARGET, "🔌 服务器关闭连接，准备重连...");
                                                        break 'message_loop;
                                                    }
                                                    OpCode::Ping => {
                                                        info!(target: AGG_TRADE_TARGET, "🏓 收到Ping，发送Pong");
                                                        if let Err(e) = ws.write_frame(Frame::new(true, OpCode::Pong, None, frame.payload)).await {
                                                            error!(target: AGG_TRADE_TARGET, "发送Pong失败: {}", e);
                                                            break 'message_loop;
                                                        }
                                                    },
                                                    OpCode::Pong => {
                                                        info!(target: AGG_TRADE_TARGET, "🏓 收到Pong");
                                                    },
                                                    OpCode::Binary => {
                                                        info!(target: AGG_TRADE_TARGET, "📦 收到二进制帧 (长度: {})", frame.payload.len());
                                                    },
                                                    _ => {
                                                        info!(target: AGG_TRADE_TARGET, "📦 收到其他类型帧: {:?} (长度: {})", frame.opcode, frame.payload.len());
                                                    }
                                                } // 结束 match frame.opcode
                                            }, // Ok(frame) 分支在这里正确结束
                                            Err(e) => { // Err(e) 分支现在是 Ok(frame) 的兄弟分支
                                                error!(target: AGG_TRADE_TARGET, "❌ WebSocket读取错误: {}", e);
                                                error!(target: WEBSOCKET_CONNECTION_TARGET, "❌ 连接 {} WebSocket读取失败，准备重连", connection_id);
                                                break 'message_loop;
                                            }
                                        } // 结束 match result
                                    }, // 结束分支1：处理WebSocket消息
                                    // 分支2：处理外部命令
                                    Some(command) = command_rx.recv() => {
                                        match command {
                                            WsCommand::Subscribe(new_symbols) => {
                                                info!(target: AGG_TRADE_TARGET, "连接 {} 收到动态订阅: {:?}", connection_id, new_symbols);
                                                let new_streams: Vec<String> = new_symbols.iter()
                                                    .map(|s| format!("{}@aggTrade", s.to_lowercase()))
                                                    .collect();

                                                let sub_msg = serde_json::json!({
                                                    "method": "SUBSCRIBE",
                                                    "params": &new_streams,
                                                    "id": chrono::Utc::now().timestamp_millis()
                                                }).to_string();

                                                // [新增] 打印完整的动态订阅信息
                                                info!(
                                                    target: AGG_TRADE_TARGET,
                                                    log_type = "low_freq",
                                                    connection_id = connection_id,
                                                    original_symbols = ?new_symbols,
                                                    formatted_streams = ?new_streams,
                                                    subscription_message = %sub_msg,
                                                    "📤 AggTradeClient 发送动态订阅消息"
                                                );

                                                // [新增] 额外的简化日志，确保动态订阅内容可见
                                                info!(target: AGG_TRADE_TARGET, "🔄 动态订阅: {} 个新品种", new_symbols.len());
                                                info!(target: AGG_TRADE_TARGET, "🔄 动态订阅消息: {}", sub_msg);
                                                info!(target: AGG_TRADE_TARGET, "🔄 新品种: {:?}", new_symbols);

                                                if let Err(e) = ws.write_frame(Frame::text(sub_msg.into_bytes().into())).await {
                                                    error!(target: AGG_TRADE_TARGET, "发送动态订阅失败: {}", e);
                                                    break 'message_loop; // 发送失败，退出重连
                                                }

                                                current_streams.extend(new_streams); // 更新当前连接管理的流

                                                // 更新连接状态中的流列表
                                                {
                                                    let mut connections = connections_clone.lock().await;
                                                    if let Some(conn) = connections.get_mut(&connection_id) {
                                                        conn.streams = current_streams.clone();
                                                    }
                                                }

                                                info!(target: AGG_TRADE_TARGET, "动态订阅成功，当前管理 {} 个流", current_streams.len());
                                            }
                                        }
                                    }
                                }
                            } // 结束 tokio::select!
                        } // 结束 'message_loop: loop
                        }, // 结束 Ok(mut ws) => { ... } 分支
                        Err(e) => {
                            // 更新状态
                            {
                                let mut connections = connections_clone.lock().await;
                                if let Some(conn) = connections.get_mut(&connection_id) {
                                    conn.status = format!("连接失败: {}", e);
                                }
                            }

                            error!(target: AGG_TRADE_TARGET, "连接 {} 失败: {}", connection_id, e);
                        }
                    }

                    // 重连延迟
                    sleep(Duration::from_secs(5)).await;
                } // 结束 'reconnect_loop: loop
            } // 结束 async move 块
            .instrument(tracing::info_span!("websocket_connection", connection_id = connection_id))); // 结束 tokio::spawn

            // 等待连接任务完成
            if let Err(e) = connection_task.await {
                error!(target: AGG_TRADE_TARGET, "连接任务错误: {}", e);
            }

            info!(target: AGG_TRADE_TARGET, "归集交易客户端已停止");
            Ok(())
        }
    }

    /// 获取连接状态
    fn get_connections(&self) -> impl std::future::Future<Output = Vec<WebSocketConnection>> + Send {
        async move {
            let connections = self.connections.lock().await;
            connections.values().cloned().collect()
        }
    }
}

//=============================================================================
// 全市场精简Ticker客户端
//=============================================================================

/// 全市场精简Ticker客户端
pub struct MiniTickerClient {
    config: MiniTickerConfig,
    connection_id_counter: AtomicUsize,
    connections: Arc<TokioMutex<HashMap<usize, WebSocketConnection>>>,
    /// 外部注入的消息处理器
    external_handler: Arc<MiniTickerMessageHandler>,
}

impl MiniTickerClient {
    /// 创建一个新的 MiniTickerClient
    #[instrument(skip_all)]
    pub fn new(config: MiniTickerConfig, handler: Arc<MiniTickerMessageHandler>) -> Self {
        Self {
            config,
            connection_id_counter: AtomicUsize::new(1),
            connections: Arc::new(TokioMutex::new(HashMap::new())),
            external_handler: handler,
        }
    }
}

impl WebSocketClient for MiniTickerClient {
    /// 启动客户端，内置健壮的重连循环
    fn start(&mut self) -> impl std::future::Future<Output = Result<()>> + Send {
        async move {
            info!(target: MINI_TICKER_TARGET, "启动全市场精简Ticker客户端 (代理: {})", self.config.use_proxy);

            // 1. 初始化所需资源
            let (use_proxy, proxy_addr, proxy_port) = self.config.get_proxy_settings();
            let connection_manager = ConnectionManager::new(use_proxy, proxy_addr, proxy_port);
            let handler = self.external_handler.clone();
            let connections = self.connections.clone();
            let streams = self.config.get_streams();
            let connection_id = self.connection_id_counter.fetch_add(1, Ordering::SeqCst);

            // 预先插入连接状态记录
            connections.lock().await.insert(connection_id, WebSocketConnection {
                id: connection_id,
                streams: streams.clone(),
                status: "初始化".to_string(),
                message_count: 0,
            });

            // 2. 启动单个后台任务，该任务包含完整的重连和消息处理逻辑
            tokio::spawn(async move {
                // 这是主重连循环
                'reconnect_loop: loop {
                    // 更新状态为"连接中"
                    connections.lock().await.get_mut(&connection_id).map(|c| c.status = "连接中".to_string());

                    // 尝试连接
                    match connection_manager.connect().await {
                        Ok(mut ws) => {
                            connections.lock().await.get_mut(&connection_id).map(|c| c.status = "已连接".to_string());
                            info!(target: MINI_TICKER_TARGET, "MiniTicker 连接 {} 已建立，准备发送订阅", connection_id);

                            // 发送订阅消息
                            let sub_msg = create_subscribe_message(&streams);
                            if let Err(e) = ws.write_frame(Frame::text(sub_msg.into_bytes().into())).await {
                                error!(target: MINI_TICKER_TARGET, "发送订阅消息失败: {}，准备重连", e);
                                sleep(Duration::from_secs(5)).await;
                                continue 'reconnect_loop;
                            }
                            info!(target: MINI_TICKER_TARGET, "MiniTicker 订阅发送成功");

                            // 进入消息处理循环
                            loop {
                                match ws.read_frame().await {
                                    Ok(frame) => {
                                        match frame.opcode {
                                            OpCode::Text => {
                                                let text = String::from_utf8_lossy(&frame.payload).to_string();
                                                connections.lock().await.get_mut(&connection_id).map(|c| c.message_count += 1);
                                                if let Err(e) = handler.handle_message(connection_id, text).await {
                                                    warn!(target: MINI_TICKER_TARGET, "消息处理失败: {}", e);
                                                }
                                            },
                                            OpCode::Close => {
                                                info!(target: MINI_TICKER_TARGET, "服务器关闭连接，准备重连...");
                                                break; // 退出消息循环，进入重连逻辑
                                            },
                                            OpCode::Ping => {
                                                let pong = Frame::pong(frame.payload);
                                                if let Err(e) = ws.write_frame(pong).await {
                                                    error!(target: MINI_TICKER_TARGET, "发送Pong失败: {}", e);
                                                    break;
                                                }
                                            },
                                            _ => {}
                                        }
                                    },
                                    Err(e) => {
                                        error!(target: MINI_TICKER_TARGET, "WebSocket读取错误: {}，准备重连", e);
                                        break; // 退出消息循环，进入重连逻辑
                                    }
                                }
                            }
                        }
                        Err(e) => {
                            connections.lock().await.get_mut(&connection_id).map(|c| c.status = format!("连接失败: {}", e));
                            error!(target: MINI_TICKER_TARGET, "MiniTicker 连接 {} 失败: {}，准备重试", connection_id, e);
                        }
                    }

                    // 任何断开或失败后，都等待5秒再重试
                    sleep(Duration::from_secs(5)).await;
                }
            }.instrument(tracing::info_span!("mini_ticker_connection", id = connection_id)));

            Ok(())
        }
    }

    /// 获取连接状态
    fn get_connections(&self) -> impl std::future::Future<Output = Vec<WebSocketConnection>> + Send {
        async move {
            self.connections.lock().await.values().cloned().collect()
        }
    }
}
